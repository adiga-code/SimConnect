from fastapi import APIRouter, HTTPException, Depends, Request
from typing import List, Dict, Any
import logging
import json

logger = logging.getLogger(__name__)
router = APIRouter()

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
MOCK_COUNTRIES = [
    {
        "id": "0",
        "name": "–†–æ—Å—Å–∏—è", 
        "code": "RU",
        "flag": "üá∑üá∫",
        "priceFrom": 15,
        "available": True,
        "numbersCount": 1234,
        "status": "available"
    },
    {
        "id": "1", 
        "name": "–£–∫—Ä–∞–∏–Ω–∞",
        "code": "UA", 
        "flag": "üá∫üá¶",
        "priceFrom": 22,
        "available": True,
        "numbersCount": 856,
        "status": "available"
    },
    {
        "id": "2",
        "name": "–ë–µ–ª–∞—Ä—É—Å—å",
        "code": "BY",
        "flag": "üáßüáæ", 
        "priceFrom": 18,
        "available": True,
        "numbersCount": 645,
        "status": "available"
    },
    {
        "id": "3",
        "name": "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", 
        "code": "KZ",
        "flag": "üá∞üáø",
        "priceFrom": 20,
        "available": True, 
        "numbersCount": 432,
        "status": "available"
    }
]

MOCK_SERVICES = [
    {
        "id": "tg",
        "name": "Telegram",
        "icon": "fab fa-telegram-plane",
        "priceFrom": 15,
        "priceTo": 25, 
        "available": True
    },
    {
        "id": "wa",
        "name": "WhatsApp", 
        "icon": "fab fa-whatsapp",
        "priceFrom": 18,
        "priceTo": 30,
        "available": True
    },
    {
        "id": "vk", 
        "name": "VKontakte",
        "icon": "fab fa-vk",
        "priceFrom": 12,
        "priceTo": 20,
        "available": True
    },
    {
        "id": "ok",
        "name": "Odnoklassniki",
        "icon": "fas fa-circle", 
        "priceFrom": 10,
        "priceTo": 15,
        "available": True
    }
]

@router.get("/countries")
async def get_countries() -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞–Ω"""
    try:
        logger.info("Getting countries list")
        result = MOCK_COUNTRIES
        logger.info(f"Returning {len(result)} countries: {[c['name'] for c in result]}")
        return result
    except Exception as e:
        logger.error(f"Error getting countries: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@router.get("/services") 
async def get_services() -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    try:
        logger.info("Getting services list")
        result = MOCK_SERVICES
        logger.info(f"Returning {len(result)} services: {[s['name'] for s in result]}")
        return result
    except Exception as e:
        logger.error(f"Error getting services: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@router.get("/users/{user_id}")
async def get_user(user_id: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    try:
        logger.info(f"Getting user info for: {user_id}")
        # –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return {
            "id": user_id,
            "username": user_id,
            "balance": 100.50,
            "orders": [],
            "created_at": "2024-01-01T00:00:00Z"
        }
    except Exception as e:
        logger.error(f"Error getting user {user_id}: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@router.get("/orders")
async def get_orders(user_id: str = None) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        logger.info(f"Getting orders for user: {user_id}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞
        result = []
        logger.info(f"Returning {len(result)} orders")
        return result
    except Exception as e:
        logger.error(f"Error getting orders: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

# –î–æ–±–∞–≤–ª—è–µ–º endpoint –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–æ —Å—Ç—Ä–∞–Ω–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω—É–∂–µ–Ω —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É)
@router.get("/countries/{country_id}/services")
async def get_services_by_country(country_id: str) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã"""
    try:
        logger.info(f"Getting services for country: {country_id}")
        result = MOCK_SERVICES  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ –∂–µ —Å–µ—Ä–≤–∏—Å—ã
        logger.info(f"Returning {len(result)} services for country {country_id}")
        return result
    except Exception as e:
        logger.error(f"Error getting services for country {country_id}: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

# –î–æ–±–∞–≤–ª—è–µ–º endpoint –¥–ª—è —Ü–µ–Ω (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω—É–∂–µ–Ω)
@router.get("/prices")
async def get_prices() -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ü–µ–Ω –¥–ª—è —Å—Ç—Ä–∞–Ω/—Å–µ—Ä–≤–∏—Å–æ–≤"""
    try:
        logger.info("Getting prices list")
        result = [
            {"country_id": "0", "service_id": "tg", "price": 15},
            {"country_id": "0", "service_id": "wa", "price": 18},
            {"country_id": "1", "service_id": "tg", "price": 22},
            {"country_id": "1", "service_id": "wa", "price": 25}
        ]
        logger.info(f"Returning {len(result)} prices")
        return result
    except Exception as e:
        logger.error(f"Error getting prices: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

# –î–æ–±–∞–≤–ª—è–µ–º catch-all –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö endpoints
@router.get("/{path:path}")
async def catch_all(path: str):
    """–ü–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö API –ø—É—Ç–µ–π"""
    logger.warning(f"Unknown API endpoint requested: /{path}")
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return []

@router.post("/orders")
async def create_order(request: Request) -> Dict[str, Any]:
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–æ–º–µ—Ä–∞"""
    try:
        # –ß–∏—Ç–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        body = await request.body()
        logger.info(f"Raw request body: {body}")
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON
        try:
            order_data = json.loads(body) if body else {}
        except json.JSONDecodeError as e:
            logger.error(f"JSON decode error: {e}")
            order_data = {}
        
        logger.info(f"Parsed order data: {order_data}")
        
        # –ë–æ–ª–µ–µ –º—è–≥–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è - –±–µ—Ä–µ–º —á—Ç–æ –µ—Å—Ç—å
        user_id = order_data.get("user_id", order_data.get("userId", "sample_user"))
        country_id = order_data.get("country_id", order_data.get("countryId", "0"))
        service_id = order_data.get("service_id", order_data.get("serviceId", "tg"))
        
        logger.info(f"Extracted: user_id={user_id}, country_id={country_id}, service_id={service_id}")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å –ª—é–±—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        import time
        order_id = f"order_{int(time.time())}"
        
        new_order = {
            "id": order_id,
            "user_id": user_id,
            "country_id": str(country_id),
            "service_id": str(service_id),
            "phone_number": "+79001234567",  # –ú–æ–∫ –Ω–æ–º–µ—Ä
            "status": "pending",
            "cost": 15.0,
            "created_at": "2024-01-01T10:00:00Z",
            "messages": [],
            "success": True
        }
        
        logger.info(f"Successfully created order: {new_order}")
        return new_order
        
    except Exception as e:
        logger.error(f"Error creating order: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        return {
            "success": True,
            "id": "order_fallback",
            "user_id": "sample_user",
            "country_id": "0",
            "service_id": "tg",
            "phone_number": "+79001234567",
            "status": "pending",
            "cost": 15.0,
            "created_at": "2024-01-01T10:00:00Z",
            "messages": [],
            "error_info": str(e)
        }

@router.get("/orders/{order_id}")
async def get_order(order_id: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ"""
    try:
        logger.info(f"Getting order: {order_id}")
        
        # –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        return {
            "id": order_id,
            "user_id": "sample_user", 
            "country_id": "0",
            "service_id": "tg",
            "phone_number": "+79001234567",
            "status": "pending",
            "cost": 15.0,
            "created_at": "2024-01-01T10:00:00Z",
            "messages": []
        }
        
    except Exception as e:
        logger.error(f"Error getting order {order_id}: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@router.delete("/orders/{order_id}")
async def cancel_order(order_id: str) -> Dict[str, Any]:
    """–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"""
    try:
        logger.info(f"Cancelling order: {order_id}")
        
        return {
            "id": order_id,
            "status": "cancelled",
            "message": "Order cancelled successfully"
        }
        
    except Exception as e:
        logger.error(f"Error cancelling order {order_id}: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@router.get("/health")
async def health_check() -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API"""
    return {
        "status": "ok",
        "message": "OnlineSim API is running",
        "version": "1.0.0"
    }