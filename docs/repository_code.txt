

================================================================================
FILE: README.md
================================================================================

# OnlineSim - SMS Verification Service

–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –¥–ª—è SMS –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ Telegram WebApp.

## üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

- **Telegram WebApp** –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
- **–í—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞** –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω
- **SMS –∫–æ–¥—ã** –≤ real-time —á–µ—Ä–µ–∑ Server-Sent Events
- **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç** —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏ –Ω–µ–ø–æ–ª—É—á–µ–Ω–∏–∏ SMS
- **–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å** –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
- **–ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞** SMS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤

## üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞

```
‚îú‚îÄ‚îÄ frontend/          # React + TypeScript + Vite
‚îú‚îÄ‚îÄ backend/           # FastAPI + SQLAlchemy + SQLite  
‚îú‚îÄ‚îÄ telegram-bot/      # aiogram Telegram Bot
‚îú‚îÄ‚îÄ nginx/             # Reverse Proxy
‚îú‚îÄ‚îÄ shared/            # –û–±—â–∏–µ —Ç–∏–ø—ã –∏ —Å—Ö–µ–º—ã
‚îî‚îÄ‚îÄ docker-compose.yml # –û—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
```

## üõ†Ô∏è –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏

### Frontend
- **React 18** + TypeScript
- **Vite** (—Å–±–æ—Ä—â–∏–∫)
- **Tailwind CSS** + shadcn/ui
- **TanStack Query** (—Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞)
- **Wouter** (—Ä–æ—É—Ç–∏–Ω–≥)
- **Server-Sent Events** (real-time)

### Backend
- **FastAPI** + Python 3.11
- **SQLAlchemy** + SQLite
- **Pydantic** (–≤–∞–ª–∏–¥–∞—Ü–∏—è)
- **asyncio** (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å)
- **Server-Sent Events** (SSE)

### DevOps
- **Docker** + Docker Compose
- **Nginx** (reverse proxy + SSL)
- **GitHub Actions** (CI/CD, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

## üöÄ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫

### 1. –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞

```bash
git clone <repository>
cd onlinesim
cp .env.example .env
```

### 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ `.env`:

```bash
# Telegram Bot
TELEGRAM_BOT_TOKEN=your-bot-token-here
WEBAPP_URL=https://yourdomain.com

# SMS Service (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)
SMS_PROVIDER=dummy
SMS_API_KEY=your-sms-api-key
SMS_WEBHOOK_SECRET=webhook-secret-key

# Security
SECRET_KEY=your-secret-key-here

# Other settings
DEBUG=False
ORDER_TIMEOUT_MINUTES=15
```

### 3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ Telegram –±–æ—Ç–∞

1. –ù–∞–π–¥–∏—Ç–µ [@BotFather](https://t.me/BotFather) –≤ Telegram
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ `/newbot`
3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º
4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω –≤ `.env`
5. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Web App:
   ```
   /setmenubutton
   @your_bot_name
   OnlineSim
   https://yourdomain.com
   ```

### 4. –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤

```bash
# –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞
docker-compose up --build

# –ü—Ä–æ–¥–∞–∫—à–µ–Ω
docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
```

### 5. –ü—Ä–æ–≤–µ—Ä–∫–∞

- **Frontend**: http://localhost
- **Backend API**: http://localhost/api/docs
- **Health Check**: http://localhost/health

## üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞

```
project-root/
‚îú‚îÄ‚îÄ frontend/                 # React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
‚îÇ   ‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/      # React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã  
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ pages/          # –°—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ lib/            # –£—Ç–∏–ª–∏—Ç—ã –∏ —Ö—É–∫–∏
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ main.tsx        # –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
‚îÇ   ‚îú‚îÄ‚îÄ Dockerfile
‚îÇ   ‚îî‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ backend/                  # FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
‚îÇ   ‚îú‚îÄ‚îÄ app/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ api/            # API —Ä–æ—É—Ç—ã
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ core/           # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –ë–î
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ models/         # SQLAlchemy –º–æ–¥–µ–ª–∏
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ schemas/        # Pydantic —Å—Ö–µ–º—ã
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ services/       # –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ sms/        # SMS –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ main.py         # FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
‚îÇ   ‚îú‚îÄ‚îÄ Dockerfile
‚îÇ   ‚îî‚îÄ‚îÄ requirements.txt
‚îú‚îÄ‚îÄ telegram-bot/            # Telegram –±–æ—Ç
‚îÇ   ‚îú‚îÄ‚îÄ bot.py              # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞
‚îÇ   ‚îú‚îÄ‚îÄ Dockerfile  
‚îÇ   ‚îî‚îÄ‚îÄ requirements.txt
‚îú‚îÄ‚îÄ nginx/                   # Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
‚îÇ   ‚îî‚îÄ‚îÄ nginx.conf
‚îú‚îÄ‚îÄ docker-compose.yml       # Docker –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è
‚îî‚îÄ‚îÄ .env.example            # –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
```

## üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SMS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤

### –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞

1. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª `backend/app/services/sms/providers/your_provider.py`:

```python
from ..adapter import SMSAdapter, SMSProviderFactory

class YourProvider(SMSAdapter):
    async def order_number(self, country_code: str, service_code: str):
        # –í–∞—à–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
        pass
    
    async def get_sms(self, external_order_id: str):
        # –í–∞—à–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
        pass

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
SMSProviderFactory.register_provider("your_provider", YourProvider)
```

2. –û–±–Ω–æ–≤–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
```bash
SMS_PROVIDER=your_provider
SMS_API_KEY=your-api-key
```

### –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤

–ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã SMS –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å POST –∑–∞–ø—Ä–æ—Å—ã –Ω–∞:
```
https://yourdomain.com/api/webhook/sms/{provider_name}
```

–§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö:
```json
{
  "order_id": "external_order_id",
  "phone_number": "+1234567890", 
  "message_text": "Your code: 12345",
  "timestamp": "2024-01-01T12:00:00Z"
}
```

## üöÄ –î–µ–ø–ª–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä

### 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞

```bash
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
curl -fsSL https://get.docker.com -o get-docker.sh
sudo sh get-docker.sh

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose
sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
```

### 2. –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞

```bash
cd /opt
sudo git clone <your-repository> onlinesim
cd onlinesim
sudo chown -R $USER:$USER .
```

### 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

```bash
cp .env.example .env
nano .env
```

**–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏—Ç–µ:**
- `TELEGRAM_BOT_TOKEN` - —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
- `SECRET_KEY` - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
- `WEBAPP_URL` - URL –≤–∞—à–µ–≥–æ –¥–æ–º–µ–Ω–∞
- `SMS_API_KEY` - –∫–ª—é—á SMS —Å–µ—Ä–≤–∏—Å–∞

### 4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–º–µ–Ω–∞ –∏ SSL

–í `nginx/nginx.conf`:
```nginx
server_name yourdomain.com;

# Uncomment for SSL:
# listen 443 ssl http2;
# ssl_certificate /etc/ssl/certs/yourdomain.crt;
# ssl_certificate_key /etc/ssl/private/yourdomain.key;
```

### 5. –ó–∞–ø—É—Å–∫

```bash
# –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
docker-compose up --build -d

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
docker-compose logs -f

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
git pull
docker-compose up --build -d
```

### 6. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞

–ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ Web App –∫–Ω–æ–ø–∫—É:
```
/setmenubutton
@your_bot_name  
OnlineSim
https://yourdomain.com
```

## üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

### –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞:

1. **–°–º–µ–Ω–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏**:
   ```bash
   SECRET_KEY=generate-strong-random-key-here
   SMS_WEBHOOK_SECRET=another-random-key
   ```

2. **–ù–∞—Å—Ç—Ä–æ–π—Ç–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã** –≤ nginx
3. **–û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –¥–æ—Å—Ç—É–ø—ã** –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
4. **–ù–∞—Å—Ç—Ä–æ–π—Ç–µ backup** –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
5. **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤**

### –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:

- **Redis** –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
- **PostgreSQL** –≤–º–µ—Å—Ç–æ SQLite
- **Sentry** –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—à–∏–±–æ–∫
- **Prometheus + Grafana** –¥–ª—è –º–µ—Ç—Ä–∏–∫

## üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

### –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:

- `GET /health` - —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
- `GET /api/health` - —Å—Ç–∞—Ç—É—Å API
- `GET /api/sse/status` - —Å—Ç–∞—Ç—É—Å SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π

### –õ–æ–≥–∏:

```bash
# –í—Å–µ –ª–æ–≥–∏
docker-compose logs -f

# –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å
docker-compose logs -f backend
docker-compose logs -f telegram_bot
```

## üîß –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞

### –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞:

```bash
# Backend
cd backend
python -m venv venv
source venv/bin/activate
pip install -r requirements.txt
uvicorn app.main:app --reload

# Frontend  
cd frontend
npm install
npm run dev

# Telegram Bot
cd telegram-bot
python bot.py
```

### –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:

```bash
# Backend —Ç–µ—Å—Ç—ã
cd backend
pytest

# Frontend —Ç–µ—Å—Ç—ã  
cd frontend
npm test
```

## üìù API –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è

–ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É: `http://localhost/docs`

### –û—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:

- `GET /api/countries` - —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω
- `GET /api/services` - —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤  
- `POST /api/orders` - —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
- `GET /api/orders` - –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- `GET /api/messages` - SMS —Å–æ–æ–±—â–µ–Ω–∏—è
- `GET /api/events` - SSE –ø–æ—Ç–æ–∫ —Å–æ–±—ã—Ç–∏–π

## ‚ùì FAQ

**Q: SMS –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç, —á—Ç–æ –¥–µ–ª–∞—Ç—å?**
A: –î–æ–∂–¥–∏—Ç–µ—Å—å 15 –º–∏–Ω—É—Ç - –¥–µ–Ω—å–≥–∏ –≤–µ—Ä–Ω—É—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ SMS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞.

**Q: –ö–∞–∫ —Å–º–µ–Ω–∏—Ç—å SMS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞?**
A: –ò–∑–º–µ–Ω–∏—Ç–µ `SMS_PROVIDER` –≤ `.env` –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã.

**Q: –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω—É?**  
A: –î–æ–±–∞–≤—å—Ç–µ –∑–∞–ø–∏—Å—å –≤ –ë–î —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é –≤ –∫–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.

**Q: –ü—Ä–æ–±–ª–µ–º—ã —Å Telegram WebApp?**
A: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏ URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.

## üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞

- **Issues**: —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ GitHub Issues
- **–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è**: –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —ç—Ç–æ–º README
- **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥**: –ª–æ–≥–∏ –≤ `docker-compose logs`

## üìÑ –õ–∏—Ü–µ–Ω–∑–∏—è

MIT License - —Å–≤–æ–±–æ–¥–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è.

================================================================================
FILE: DEPLOY_GUIDE.md
================================================================================



================================================================================
FILE: parse.py
================================================================================

import os
import pathlib

def export_repo_to_text(root_dir, output_file, include_extensions=None, exclude_dirs=None):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–æ–¥ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"""
    if include_extensions is None:
        include_extensions = ['.py', '.js', '.html', '.css', '.md', '.java', '.c', '.cpp', '.h']
    
    if exclude_dirs is None:
        exclude_dirs = ['.git', '__pycache__', 'node_modules', 'venv', '.venv', 'env', 'dist', 'build']
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    os.makedirs(os.path.dirname(output_file), exist_ok=True)
    
    root_dir = pathlib.Path(root_dir).resolve()
    exclude_dirs_set = set(exclude_dirs)

    with open(output_file, 'w', encoding='utf-8') as outfile:
        for root, dirs, files in os.walk(root_dir):
            root_path = pathlib.Path(root)
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π (–ø–æ –∏–º–µ–Ω–∏)
            dirs[:] = [d for d in dirs if d not in exclude_dirs_set]
            
            for file in files:
                file_path = root_path / file
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
                if file_path.suffix not in include_extensions:
                    continue

                # –ü—Ä–æ–ø—É—Å–∫ –µ—Å–ª–∏ –ø—É—Ç—å —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å–∫–ª—é—á—ë–Ω–Ω—É—é –ø–∞–ø–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: .../.venv/...)
                if any(part in exclude_dirs_set for part in file_path.parts):
                    continue
                
                try:
                    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∞–π–ª–∞
                    rel_path = file_path.relative_to(root_dir)
                    outfile.write(f"\n\n{'=' * 80}\n")
                    outfile.write(f"FILE: {rel_path}\n")
                    outfile.write(f"{'=' * 80}\n\n")
                    
                    # –ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                    with open(file_path, 'r', encoding='utf-8') as infile:
                        outfile.write(infile.read())
                        
                except UnicodeDecodeError:
                    outfile.write(f"\n\n[BINARY FILE: {rel_path} - SKIPPED]\n")
                except Exception as e:
                    outfile.write(f"\n\n[ERROR READING {rel_path}: {str(e)}]\n")

if __name__ == "__main__":
    REPO_DIR = pathlib.Path(__file__).parent.resolve()
    OUTPUT_PATH = REPO_DIR / "docs/repository_code.txt"
    
    print(f"–°—Ç–∞—Ä—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {REPO_DIR}")
    print(f"–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {OUTPUT_PATH}")
    
    export_repo_to_text(
        root_dir=REPO_DIR,
        output_file=str(OUTPUT_PATH),
        include_extensions=[".py", ".js", ".html", ".css", ".md", ".ts", ".json",".tsx",".",".",".",],
        exclude_dirs=[".git", "__pycache__", "venv", ".venv", "env", "dist", "build", "node_modules"]
    )
    
    print(f"–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(OUTPUT_PATH)/1024:.2f} KB")


================================================================================
FILE: shared/types.py
================================================================================



================================================================================
FILE: shared/schema.ts
================================================================================

import { sql } from "drizzle-orm";
import { pgTable, text, varchar, integer, boolean, timestamp } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";

export const countries = pgTable("countries", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  name: text("name").notNull(),
  code: text("code").notNull().unique(),
  flag: text("flag").notNull(),
  priceFrom: integer("price_from").notNull(),
  available: boolean("available").notNull().default(true),
  numbersCount: integer("numbers_count").notNull().default(0),
  status: text("status").notNull().default("available"), // available, low, unavailable
});

export const services = pgTable("services", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  name: text("name").notNull(),
  icon: text("icon").notNull(),
  priceFrom: integer("price_from").notNull(),
  priceTo: integer("price_to").notNull(),
  available: boolean("available").notNull().default(true),
});

export const orders = pgTable("orders", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  phoneNumber: text("phone_number").notNull(),
  countryId: varchar("country_id").references(() => countries.id).notNull(),
  serviceId: varchar("service_id").references(() => services.id).notNull(),
  price: integer("price").notNull(),
  status: text("status").notNull().default("active"), // active, completed, expired
  expiresAt: timestamp("expires_at").notNull(),
  createdAt: timestamp("created_at").notNull().default(sql`now()`),
});

export const messages = pgTable("messages", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  orderId: varchar("order_id").references(() => orders.id).notNull(),
  text: text("text").notNull(),
  code: text("code"),
  receivedAt: timestamp("received_at").notNull().default(sql`now()`),
});

export const users = pgTable("users", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  telegramId: text("telegram_id").notNull().unique(),
  username: text("username"),
  balance: integer("balance").notNull().default(0), // in kopecks
  isAdmin: boolean("is_admin").notNull().default(false),
});

export const settings = pgTable("settings", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  key: text("key").notNull().unique(),
  value: text("value").notNull(),
  description: text("description"),
  updatedAt: timestamp("updated_at").notNull().default(sql`now()`),
});

export const statistics = pgTable("statistics", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  date: text("date").notNull(), // YYYY-MM-DD
  totalOrders: integer("total_orders").notNull().default(0),
  totalRevenue: integer("total_revenue").notNull().default(0), // in kopecks
  newUsers: integer("new_users").notNull().default(0),
  activeUsers: integer("active_users").notNull().default(0),
});

export const insertCountrySchema = createInsertSchema(countries).omit({
  id: true,
});

export const insertServiceSchema = createInsertSchema(services).omit({
  id: true,
});

export const insertOrderSchema = createInsertSchema(orders).omit({
  id: true,
  createdAt: true,
});

export const insertMessageSchema = createInsertSchema(messages).omit({
  id: true,
  receivedAt: true,
});

export const insertUserSchema = createInsertSchema(users).omit({
  id: true,
});

export const insertSettingSchema = createInsertSchema(settings).omit({
  id: true,
  updatedAt: true,
});

export const insertStatisticSchema = createInsertSchema(statistics).omit({
  id: true,
});

export type Country = typeof countries.$inferSelect;
export type Service = typeof services.$inferSelect;
export type Order = typeof orders.$inferSelect;
export type Message = typeof messages.$inferSelect;
export type User = typeof users.$inferSelect;
export type Setting = typeof settings.$inferSelect;
export type Statistic = typeof statistics.$inferSelect;
export type InsertCountry = z.infer<typeof insertCountrySchema>;
export type InsertService = z.infer<typeof insertServiceSchema>;
export type InsertOrder = z.infer<typeof insertOrderSchema>;
export type InsertMessage = z.infer<typeof insertMessageSchema>;
export type InsertUser = z.infer<typeof insertUserSchema>;
export type InsertSetting = z.infer<typeof insertSettingSchema>;
export type InsertStatistic = z.infer<typeof insertStatisticSchema>;


================================================================================
FILE: telegram-bot/bot.py
================================================================================

import asyncio
import logging
import os
from typing import Any, Dict

from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import (
    Message, InlineKeyboardMarkup, InlineKeyboardButton, 
    WebAppInfo, MenuButtonWebApp
)
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
WEBAPP_URL = os.getenv("WEBAPP_URL", "http://localhost:3000")

if not BOT_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN environment variable is required")

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()
router = Router()

class BotStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞"""
    waiting_for_command = State()

def create_main_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å WebApp"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üöÄ –û—Ç–∫—Ä—ã—Ç—å OnlineSim",
                    web_app=WebAppInfo(url=WEBAPP_URL)
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                    callback_data="info"
                ),
                InlineKeyboardButton(
                    text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
                    callback_data="support"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üì¢ –ö–∞–Ω–∞–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏",
                    url="https://t.me/onlinesim_channel"
                )
            ]
        ]
    )
    return keyboard

def create_info_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üì± –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä?",
                    callback_data="how_to_use"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üí∞ –¶–µ–Ω—ã",
                    callback_data="prices"
                ),
                InlineKeyboardButton(
                    text="üåç –°—Ç—Ä–∞–Ω—ã", 
                    callback_data="countries"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data="back_to_main"
                )
            ]
        ]
    )
    return keyboard

@router.message(CommandStart())
async def start_handler(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    
    # –ü–æ–ª—É—á–∞–µ–º start –ø–∞—Ä–∞–º–µ—Ç—Ä
    start_param = message.text.split()[1] if len(message.text.split()) > 1 else None
    
    logger.info(f"User {user.id} (@{user.username}) started bot with param: {start_param}")
    
    welcome_text = f"""
üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OnlineSim!</b>

–ü—Ä–∏–≤–µ—Ç, <b>{user.first_name}</b>! 

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö:

üì± <b>Telegram, WhatsApp, Discord</b> –∏ –º–Ω–æ–≥–∏–µ –¥—Ä—É–≥–∏–µ
üåç –ù–æ–º–µ—Ä–∞ –∏–∑ <b>–†–æ—Å—Å–∏–∏, –£–∫—Ä–∞–∏–Ω—ã, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞</b> –∏ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω
‚ö° <b>–ë—ã—Å—Ç—Ä–æ</b> –∏ <b>–Ω–∞–¥–µ–∂–Ω–æ</b>
üí∞ –ù–∏–∑–∫–∏–µ —Ü–µ–Ω—ã –æ—Ç <b>15‚ÇΩ</b>

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º!
    """
    
    await message.answer(
        welcome_text,
        reply_markup=create_main_keyboard()
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –º–µ–Ω—é WebApp
    await bot.set_chat_menu_button(
        chat_id=message.chat.id,
        menu_button=MenuButtonWebApp(
            text="OnlineSim",
            web_app=WebAppInfo(url=WEBAPP_URL)
        )
    )

@router.message(Command("help"))
async def help_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üÜò <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é OnlineSim</b>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/support - –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞

<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å OnlineSim"
2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –∏ —Å–µ—Ä–≤–∏—Å
3Ô∏è‚É£ –û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑
4Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–º–µ—Ä –∏ –∂–¥–∏—Ç–µ SMS
5Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥

<b>–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è SMS:</b> –¥–æ 15 –º–∏–Ω—É—Ç
<b>–ü—Ä–∏ –Ω–µ–ø–æ–ª—É—á–µ–Ω–∏–∏:</b> –¥–µ–Ω—å–≥–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è

–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É! üëá
    """
    
    await message.answer(
        help_text,
        reply_markup=create_main_keyboard()
    )

@router.message(Command("support"))
async def support_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /support"""
    support_text = """
üí¨ <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</b>

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –º—ã –ø–æ–º–æ–∂–µ–º!

<b>–°–ø–æ—Å–æ–±—ã —Å–≤—è–∑–∏:</b>
‚Ä¢ Telegram: @support
‚Ä¢ Email: support@onlinesim.com

<b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> 24/7

<b>–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>
‚Ä¢ SMS –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç - –∂–¥–∏—Ç–µ –¥–æ 15 –º–∏–Ω—É—Ç, –¥–µ–Ω—å–≥–∏ –≤–µ—Ä–Ω—É—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞
‚Ä¢ –ù–µ—Ç –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã - —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ –∫–∞–Ω–∞–ª–µ

–ú—ã –æ—Ç–≤–µ—á–∞–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç! ‚ö°
    """
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                    url="https://t.me/support"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data="back_to_main"
                )
            ]
        ]
    )
    
    await message.answer(support_text, reply_markup=keyboard)

@router.callback_query(F.data == "info")
async def info_callback(callback_query) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    info_text = """
‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± OnlineSim</b>

<b>–ß—Ç–æ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:</b>
üîπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è SMS –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
üîπ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
üîπ –ù–æ–º–µ—Ä–∞ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω –º–∏—Ä–∞
üîπ –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ SMS –∫–æ–¥–æ–≤

<b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>
‚úÖ –ù–∏–∑–∫–∏–µ —Ü–µ–Ω—ã
‚úÖ –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è SMS
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤
‚úÖ –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚úÖ –ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:
    """
    
    await callback_query.message.edit_text(
        info_text,
        reply_markup=create_info_keyboard()
    )
    await callback_query.answer()

@router.callback_query(F.data == "how_to_use")
async def how_to_use_callback(callback_query) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä?"""
    instruction_text = """
üì± <b>–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</b>

<b>1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</b>
–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å OnlineSim"

<b>2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å</b>
Telegram, WhatsApp, Discord –∏–ª–∏ –¥—Ä—É–≥–æ–π

<b>3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É</b>
–†–æ—Å—Å–∏—è, –£–∫—Ä–∞–∏–Ω–∞, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω –∏ –¥—Ä.

<b>4Ô∏è‚É£ –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å</b>
–ï—Å–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ

<b>5Ô∏è‚É£ –ó–∞–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä</b>
–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å –Ω–æ–º–µ—Ä"

<b>6Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–º–µ—Ä</b>
–ù–æ–º–µ—Ä –ø–æ—è–≤–∏—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–ù–æ–º–µ—Ä–∞"

<b>7Ô∏è‚É£ –ñ–¥–∏—Ç–µ SMS</b>
–î–æ 15 –º–∏–Ω—É—Ç, –∫–æ–¥ –ø–æ—è–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

<b>8Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–¥</b>
–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –Ω—É–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å

‚ùó <b>–í–∞–∂–Ω–æ:</b> –ï—Å–ª–∏ SMS –Ω–µ –ø—Ä–∏—à–ª–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç, –¥–µ–Ω—å–≥–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Ä–Ω—É—Ç—Å—è –Ω–∞ –±–∞–ª–∞–Ω—Å.
    """
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üöÄ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å",
                    web_app=WebAppInfo(url=WEBAPP_URL)
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data="info"
                )
            ]
        ]
    )
    
    await callback_query.message.edit_text(
        instruction_text,
        reply_markup=keyboard
    )
    await callback_query.answer()

@router.callback_query(F.data == "prices")
async def prices_callback(callback_query) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–¶–µ–Ω—ã"""
    prices_text = """
üí∞ <b>–¶–µ–Ω—ã –Ω–∞ –Ω–æ–º–µ—Ä–∞</b>

<b>üá∑üá∫ –†–æ—Å—Å–∏—è</b>
‚Ä¢ Telegram: –æ—Ç 15‚ÇΩ
‚Ä¢ WhatsApp: –æ—Ç 18‚ÇΩ
‚Ä¢ Discord: –æ—Ç 20‚ÇΩ

<b>üá∫üá¶ –£–∫—Ä–∞–∏–Ω–∞</b>
‚Ä¢ Telegram: –æ—Ç 22‚ÇΩ
‚Ä¢ WhatsApp: –æ—Ç 25‚ÇΩ
‚Ä¢ Discord: –æ—Ç 28‚ÇΩ

<b>üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω</b>
‚Ä¢ Telegram: –æ—Ç 18‚ÇΩ
‚Ä¢ WhatsApp: –æ—Ç 20‚ÇΩ
‚Ä¢ Discord: –æ—Ç 25‚ÇΩ

<b>üá∫üá∏ –°–®–ê</b>
‚Ä¢ Telegram: –æ—Ç 45‚ÇΩ
‚Ä¢ WhatsApp: –æ—Ç 50‚ÇΩ
‚Ä¢ Discord: –æ—Ç 55‚ÇΩ

üí° <b>–°–∫–∏–¥–∫–∏:</b>
‚Ä¢ –ü—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç 500‚ÇΩ - —Å–∫–∏–¥–∫–∞ 5%
‚Ä¢ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º - –¥–æ 10%

–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏!
    """
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
                    web_app=WebAppInfo(url=f"{WEBAPP_URL}?tab=profile")
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data="info"
                )
            ]
        ]
    )
    
    await callback_query.message.edit_text(
        prices_text,
        reply_markup=keyboard
    )
    await callback_query.answer()

@router.callback_query(F.data == "countries")
async def countries_callback(callback_query) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç—Ä–∞–Ω—ã"""
    countries_text = """
üåç <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã</b>

<b>üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ (–º–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–æ–≤):</b>
üá∑üá∫ –†–æ—Å—Å–∏—è - 1200+ –Ω–æ–º–µ—Ä–æ–≤
üá∫üá¶ –£–∫—Ä–∞–∏–Ω–∞ - 850+ –Ω–æ–º–µ—Ä–æ–≤

<b>üü° –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ (–º–∞–ª–æ –Ω–æ–º–µ—Ä–æ–≤):</b>
üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω - 15+ –Ω–æ–º–µ—Ä–æ–≤

<b>üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ:</b>
üá∫üá∏ –°–®–ê - –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ—Ç –Ω–æ–º–µ—Ä–æ–≤

<b>üîÑ –°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º:</b>
üáßüáæ –ë–µ–ª–∞—Ä—É—Å—å
üáµüá± –ü–æ–ª—å—à–∞
üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è

–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ!
    """
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üì¢ –ö–∞–Ω–∞–ª —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏",
                    url="https://t.me/onlinesim_channel"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data="info"
                )
            ]
        ]
    )
    
    await callback_query.message.edit_text(
        countries_text,
        reply_markup=keyboard
    )
    await callback_query.answer()

@router.callback_query(F.data == "support")
async def support_callback(callback_query) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"""
    await support_handler(callback_query.message)
    await callback_query.answer()

@router.callback_query(F.data == "back_to_main")
async def back_to_main_callback(callback_query) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    welcome_text = """
üéâ <b>OnlineSim - –í—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤</b>

üì± <b>–ü–æ–ª—É—á–∞–π—Ç–µ SMS –∫–æ–¥—ã –±—ã—Å—Ç—Ä–æ –∏ –Ω–∞–¥–µ–∂–Ω–æ!</b>

üåü –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã:
‚Ä¢ Telegram, WhatsApp, Discord
‚Ä¢ Instagram, Twitter, VKontakte
‚Ä¢ –ò –º–Ω–æ–≥–∏–µ –¥—Ä—É–≥–∏–µ...

üí∞ –¶–µ–Ω—ã –æ—Ç 15‚ÇΩ | ‚ö° SMS –∑–∞ 1-5 –º–∏–Ω—É—Ç | üîÑ –ê–≤—Ç–æ–≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!
    """
    
    await callback_query.message.edit_text(
        welcome_text,
        reply_markup=create_main_keyboard()
    )
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def echo_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
        reply_markup=create_main_keyboard()
    )

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
dp.include_router(router)

async def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("Starting OnlineSim Telegram Bot...")
    
    # –£–¥–∞–ª—è–µ–º webhook –µ—Å–ª–∏ –µ—Å—Ç—å
    await bot.delete_webhook(drop_pending_updates=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

================================================================================
FILE: backend/alembic/env.py
================================================================================



================================================================================
FILE: backend/alembic/__init__.py
================================================================================



================================================================================
FILE: backend/alembic/versions/__init__.py
================================================================================



================================================================================
FILE: backend/app/__init__.py
================================================================================



================================================================================
FILE: backend/app/data_init.py
================================================================================

import logging
from sqlalchemy.orm import Session
from .core.database import SessionLocal
from .models.models import Country, Service, User, Setting, Statistic
from .schemas.schemas import CountryStatus
from datetime import datetime
import uuid

logger = logging.getLogger(__name__)

async def initialize_data():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î"""
    db = SessionLocal()
    try:
        await _init_countries(db)
        await _init_services(db)
        await _init_sample_user(db)
        await _init_settings(db)
        await _init_statistics(db)
        
        db.commit()
        logger.info("Initial data initialization completed")
        
    except Exception as e:
        logger.error(f"Error initializing data: {e}")
        db.rollback()
    finally:
        db.close()

async def _init_countries(db: Session):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω—ã"""
    if db.query(Country).count() > 0:
        logger.info("Countries already exist, skipping initialization")
        return
    
    countries_data = [
        {
            "name": "–†–æ—Å—Å–∏—è",
            "code": "RU", 
            "flag": "üá∑üá∫",
            "price_from": 15,
            "available": True,
            "numbers_count": 1234,
            "status": CountryStatus.AVAILABLE.value
        },
        {
            "name": "–£–∫—Ä–∞–∏–Ω–∞",
            "code": "UA",
            "flag": "üá∫üá¶", 
            "price_from": 22,
            "available": True,
            "numbers_count": 856,
            "status": CountryStatus.AVAILABLE.value
        },
        {
            "name": "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω",
            "code": "KZ",
            "flag": "üá∞üáø",
            "price_from": 18,
            "available": True,
            "numbers_count": 12,
            "status": CountryStatus.LOW.value
        },
        {
            "name": "–°–®–ê",
            "code": "US",
            "flag": "üá∫üá∏",
            "price_from": 45,
            "available": False,
            "numbers_count": 0,
            "status": CountryStatus.UNAVAILABLE.value
        }
    ]
    
    for country_data in countries_data:
        country = Country(
            id=str(uuid.uuid4()),
            **country_data
        )
        db.add(country)
    
    logger.info(f"Created {len(countries_data)} countries")

async def _init_services(db: Session):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å—ã"""
    if db.query(Service).count() > 0:
        logger.info("Services already exist, skipping initialization")
        return
    
    services_data = [
        {
            "name": "Telegram",
            "icon": "fab fa-telegram",
            "price_from": 15,
            "price_to": 25,
            "available": True
        },
        {
            "name": "WhatsApp", 
            "icon": "fab fa-whatsapp",
            "price_from": 18,
            "price_to": 30,
            "available": True
        },
        {
            "name": "Discord",
            "icon": "fab fa-discord",
            "price_from": 20,
            "price_to": 35,
            "available": True
        }
    ]
    
    for service_data in services_data:
        service = Service(
            id=str(uuid.uuid4()),
            **service_data
        )
        db.add(service)
    
    logger.info(f"Created {len(services_data)} services")

async def _init_sample_user(db: Session):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    sample_telegram_id = "sample_user"
    
    existing_user = db.query(User).filter(User.telegram_id == sample_telegram_id).first()
    if existing_user:
        logger.info("Sample user already exists, skipping initialization")
        return
    
    user = User(
        id=str(uuid.uuid4()),
        telegram_id=sample_telegram_id,
        username="testuser",
        first_name="Test",
        last_name="User",
        balance=12550,  # 125.50 —Ä—É–±–ª–µ–π –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        is_admin=True
    )
    
    db.add(user)
    logger.info("Created sample user")

async def _init_settings(db: Session):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    if db.query(Setting).count() > 0:
        logger.info("Settings already exist, skipping initialization")
        return
    
    settings_data = [
        {
            "key": "commission_percent",
            "value": "5",
            "description": "–ö–æ–º–∏—Å—Å–∏—è –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö"
        },
        {
            "key": "min_balance",
            "value": "100", 
            "description": "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤ –∫–æ–ø–µ–π–∫–∞—Ö"
        },
        {
            "key": "support_url",
            "value": "https://t.me/support",
            "description": "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É"
        },
        {
            "key": "telegram_channel",
            "value": "https://t.me/onlinesim_channel",
            "description": "–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª Telegram"
        }
    ]
    
    for setting_data in settings_data:
        setting = Setting(
            id=str(uuid.uuid4()),
            updated_at=datetime.now(),
            **setting_data
        )
        db.add(setting)
    
    logger.info(f"Created {len(settings_data)} settings")

async def _init_statistics(db: Session):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    if db.query(Statistic).count() > 0:
        logger.info("Statistics already exist, skipping initialization")
        return
    
    today = datetime.now().strftime("%Y-%m-%d")
    yesterday = datetime.now().replace(day=datetime.now().day - 1).strftime("%Y-%m-%d")
    
    statistics_data = [
        {
            "date": today,
            "total_orders": 45,
            "total_revenue": 125000,
            "new_users": 12, 
            "active_users": 89
        },
        {
            "date": yesterday,
            "total_orders": 38,
            "total_revenue": 98500,
            "new_users": 8,
            "active_users": 76
        }
    ]
    
    for stat_data in statistics_data:
        statistic = Statistic(
            id=str(uuid.uuid4()),
            **stat_data
        )
        db.add(statistic)
    
    logger.info(f"Created {len(statistics_data)} statistics records")

================================================================================
FILE: backend/app/main.py
================================================================================

import asyncio
import logging
from contextlib import asynccontextmanager

from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse

from .core.config import settings
from .core.database import create_tables
from .api.routes import router
from .utils.telegram import create_telegram_auth_middleware
from .services.order_service import start_cleanup_task
from .data_init import initialize_data

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, settings.log_level.upper()),
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("Starting OnlineSim FastAPI application...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ë–î
    create_tables()
    logger.info("Database tables created")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    await initialize_data()
    logger.info("Initial data loaded")
    
    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    cleanup_task = asyncio.create_task(start_cleanup_task())
    logger.info("Background tasks started")
    
    yield
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
    logger.info("Shutting down OnlineSim application...")
    cleanup_task.cancel()
    try:
        await cleanup_task
    except asyncio.CancelledError:
        pass

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="OnlineSim API",
    description="API –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–∫—É–ø–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤",
    version="1.0.0",
    docs_url="/docs" if settings.debug else None,
    redoc_url="/redoc" if settings.debug else None,
    lifespan=lifespan
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.cors_origins,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE"],
    allow_headers=["*"],
)

# Telegram Auth middleware
app.add_middleware("http", create_telegram_auth_middleware())

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    logger.error(f"Global exception handler: {exc}", exc_info=True)
    return JSONResponse(
        status_code=500,
        content={"detail": "Internal server error"}
    )

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–æ–≤
app.include_router(router)

# –û—Å–Ω–æ–≤–Ω—ã–µ endpoints
@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint"""
    return {
        "message": "OnlineSim API",
        "version": "1.0.0",
        "status": "running"
    }

@app.get("/health")
async def health():
    """Health check endpoint"""
    return {"status": "healthy"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "main:app",
        host=settings.host,
        port=settings.port,
        reload=settings.debug,
        log_level=settings.log_level.lower()
    )

================================================================================
FILE: backend/app/schemas/__init__.py
================================================================================



================================================================================
FILE: backend/app/schemas/schemas.py
================================================================================

from pydantic import BaseModel
from datetime import datetime
from typing import Optional, List
from enum import Enum

# Enums
class OrderStatus(str, Enum):
    PENDING = "pending"
    RECEIVED = "received" 
    EXPIRED = "expired"
    CANCELLED = "cancelled"

class CountryStatus(str, Enum):
    AVAILABLE = "available"
    LOW = "low"
    UNAVAILABLE = "unavailable"

# Base schemas
class CountryBase(BaseModel):
    name: str
    code: str
    flag: str
    price_from: int
    available: bool = True
    numbers_count: int = 0
    status: CountryStatus = CountryStatus.AVAILABLE

class Country(CountryBase):
    id: str
    
    class Config:
        from_attributes = True

class ServiceBase(BaseModel):
    name: str
    icon: str
    price_from: int
    price_to: int
    available: bool = True

class Service(ServiceBase):
    id: str
    
    class Config:
        from_attributes = True

class OrderBase(BaseModel):
    phone_number: str
    country_id: str
    service_id: str
    price: int
    status: OrderStatus = OrderStatus.PENDING

class OrderCreate(BaseModel):
    country_id: str
    service_id: str
    telegram_id: str

class Order(OrderBase):
    id: str
    user_telegram_id: str
    expires_at: datetime
    created_at: datetime
    external_order_id: Optional[str] = None
    
    # Relationships
    country: Optional[Country] = None
    service: Optional[Service] = None
    
    class Config:
        from_attributes = True

class MessageBase(BaseModel):
    text: str
    code: Optional[str] = None

class MessageCreate(MessageBase):
    order_id: str

class Message(MessageBase):
    id: str
    order_id: str
    received_at: datetime
    
    class Config:
        from_attributes = True

class UserBase(BaseModel):
    telegram_id: str
    username: Optional[str] = None
    first_name: Optional[str] = None
    last_name: Optional[str] = None
    balance: int = 0
    is_admin: bool = False

class UserCreate(UserBase):
    pass

class User(UserBase):
    id: str
    created_at: datetime
    
    class Config:
        from_attributes = True

class SettingBase(BaseModel):
    key: str
    value: str
    description: Optional[str] = None

class SettingCreate(SettingBase):
    pass

class SettingUpdate(BaseModel):
    value: str

class Setting(SettingBase):
    id: str
    updated_at: datetime
    
    class Config:
        from_attributes = True

class StatisticBase(BaseModel):
    date: str  # YYYY-MM-DD
    total_orders: int = 0
    total_revenue: int = 0
    new_users: int = 0
    active_users: int = 0

class StatisticCreate(StatisticBase):
    pass

class Statistic(StatisticBase):
    id: str
    
    class Config:
        from_attributes = True

# Response schemas
class OrderResponse(Order):
    messages: List[Message] = []

# Webhook schemas
class SMSWebhookData(BaseModel):
    order_id: str
    phone_number: str
    message_text: str
    code: Optional[str] = None
    timestamp: datetime

# SSE Event schemas  
class SSEEvent(BaseModel):
    type: str
    data: dict

class OrderStatusUpdate(BaseModel):
    order_id: str
    status: OrderStatus
    message: Optional[str] = None

class SMSReceived(BaseModel):
    order_id: str
    message: Message

================================================================================
FILE: backend/app/utils/telegram.py
================================================================================

import hashlib
import hmac
import json
import logging
from typing import Optional, Dict, Any
from urllib.parse import unquote
from ..core.config import settings

logger = logging.getLogger(__name__)

def validate_telegram_init_data(init_data: str) -> Optional[Dict[str, Any]]:
    """
    –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp
    
    Args:
        init_data: –°—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç Telegram WebApp
        
    Returns:
        Dict —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None –µ—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞
    """
    try:
        if not init_data or not settings.telegram_bot_token:
            logger.warning("Missing init_data or bot token")
            return None
        
        # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        params = {}
        for item in init_data.split('&'):
            if '=' in item:
                key, value = item.split('=', 1)
                params[key] = unquote(value)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º hash –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        received_hash = params.pop('hash', '')
        if not received_hash:
            logger.warning("No hash in init_data")
            return None
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        data_check_string = '\n'.join([
            f"{key}={value}" 
            for key, value in sorted(params.items())
        ])
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
        secret_key = hmac.new(
            "WebAppData".encode(), 
            settings.telegram_bot_token.encode(), 
            hashlib.sha256
        ).digest()
        
        # –í—ã—á–∏—Å–ª—è–µ–º hash
        calculated_hash = hmac.new(
            secret_key,
            data_check_string.encode(),
            hashlib.sha256
        ).hexdigest()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º hash
        if not hmac.compare_digest(calculated_hash, received_hash):
            logger.warning("Invalid hash in Telegram init_data")
            return None
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = {}
        if 'user' in params:
            try:
                user_info = json.loads(params['user'])
                user_data = {
                    'id': user_info.get('id'),
                    'first_name': user_info.get('first_name'),
                    'last_name': user_info.get('last_name'),
                    'username': user_info.get('username'),
                    'language_code': user_info.get('language_code'),
                    'is_premium': user_info.get('is_premium', False)
                }
            except json.JSONDecodeError as e:
                logger.error(f"Error parsing user data: {e}")
                return None
        
        logger.info(f"Telegram user validated: {user_data.get('id')}")
        return user_data
        
    except Exception as e:
        logger.error(f"Error validating Telegram init_data: {e}")
        return None

def create_telegram_auth_middleware():
    """–°–æ–∑–¥–∞—Ç—å middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Telegram"""
    
    async def telegram_auth_middleware(request, call_next):
        """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Telegram"""
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
        public_paths = ['/docs', '/openapi.json', '/webhook/', '/health']
        if any(request.url.path.startswith(path) for path in public_paths):
            return await call_next(request)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        init_data = request.headers.get('X-Telegram-Init-Data')
        if not init_data:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
            init_data = request.query_params.get('init_data')
        
        if init_data:
            user_data = validate_telegram_init_data(init_data)
            if user_data:
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ request
                request.state.telegram_user = user_data
                return await call_next(request)
        
        # –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –º–æ–∂–µ–º –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
        if settings.debug:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            request.state.telegram_user = {
                'id': 'sample_user',
                'first_name': 'Test',
                'last_name': 'User',
                'username': 'testuser'
            }
            return await call_next(request)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        from fastapi import HTTPException
        raise HTTPException(status_code=401, detail="Unauthorized")
    
    return telegram_auth_middleware

def get_current_telegram_user(request) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –∏–∑ request"""
    return getattr(request.state, 'telegram_user', None)

def format_telegram_name(user_data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram"""
    first_name = user_data.get('first_name', '')
    last_name = user_data.get('last_name', '')
    username = user_data.get('username', '')
    
    if first_name and last_name:
        return f"{first_name} {last_name}"
    elif first_name:
        return first_name
    elif username:
        return f"@{username}"
    else:
        return "Unknown User"

def is_telegram_premium(user_data: Dict[str, Any]) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram Premium"""
    return user_data.get('is_premium', False)

def create_webapp_url(path: str = "", start_param: str = "") -> str:
    """–°–æ–∑–¥–∞—Ç—å URL –¥–ª—è Telegram WebApp"""
    base_url = settings.webapp_url.rstrip('/')
    if path:
        path = path.lstrip('/')
        base_url = f"{base_url}/{path}"
    
    if start_param:
        base_url = f"{base_url}?start_param={start_param}"
    
    return base_url

def create_telegram_bot_url(start_param: str = "") -> str:
    """–°–æ–∑–¥–∞—Ç—å URL –¥–ª—è Telegram –±–æ—Ç–∞"""
    bot_token = settings.telegram_bot_token
    if not bot_token:
        return ""
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –±–æ—Ç–∞ –∏–∑ —Ç–æ–∫–µ–Ω–∞
    bot_name = bot_token.split(':')[0] if ':' in bot_token else ""
    
    url = f"https://t.me/{bot_name}"
    if start_param:
        url = f"{url}?start={start_param}"
    
    return url

def validate_telegram_callback_query(callback_data: str) -> bool:
    """–í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å callback query –æ—Ç Telegram"""
    try:
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã –∏ —Ñ–æ—Ä–º–∞—Ç–∞
        if not callback_data or len(callback_data) > 64:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        allowed_chars = set("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-:")
        if not all(c in allowed_chars for c in callback_data):
            return False
        
        return True
        
    except Exception as e:
        logger.error(f"Error validating callback query: {e}")
        return False

================================================================================
FILE: backend/app/utils/__init__.py
================================================================================



================================================================================
FILE: backend/app/services/user_service.py
================================================================================

import logging
from datetime import datetime
from typing import Optional
from sqlalchemy.orm import Session
from ..models.models import User
from ..schemas.schemas import UserCreate
from ..utils.telegram import validate_telegram_init_data

logger = logging.getLogger(__name__)

class UserService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    
    @staticmethod
    def get_user_by_telegram_id(db: Session, telegram_id: str) -> Optional[User]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID"""
        return db.query(User).filter(User.telegram_id == telegram_id).first()
    
    @staticmethod
    def create_user(db: Session, user_data: UserCreate) -> Optional[User]:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            existing_user = UserService.get_user_by_telegram_id(db, user_data.telegram_id)
            if existing_user:
                logger.info(f"User already exists: {user_data.telegram_id}")
                return existing_user
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User(
                id=UserService._generate_id(),
                telegram_id=user_data.telegram_id,
                username=user_data.username,
                first_name=user_data.first_name,
                last_name=user_data.last_name,
                balance=user_data.balance or 0,
                is_admin=user_data.is_admin or False
            )
            
            db.add(user)
            db.commit()
            db.refresh(user)
            
            logger.info(f"User created: {user.telegram_id}")
            return user
            
        except Exception as e:
            logger.error(f"Error creating user: {e}")
            db.rollback()
            return None
    
    @staticmethod
    def update_user_balance(db: Session, telegram_id: str, new_balance: int) -> Optional[User]:
        """–û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user = UserService.get_user_by_telegram_id(db, telegram_id)
            if not user:
                logger.error(f"User not found for balance update: {telegram_id}")
                return None
            
            old_balance = user.balance
            user.balance = new_balance
            
            db.commit()
            db.refresh(user)
            
            logger.info(f"User balance updated: {telegram_id}, {old_balance} -> {new_balance}")
            return user
            
        except Exception as e:
            logger.error(f"Error updating user balance: {e}")
            db.rollback()
            return None
    
    @staticmethod
    def add_balance(db: Session, telegram_id: str, amount: int) -> Optional[User]:
        """–î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏ –∫ –±–∞–ª–∞–Ω—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user = UserService.get_user_by_telegram_id(db, telegram_id)
            if not user:
                logger.error(f"User not found for balance addition: {telegram_id}")
                return None
            
            user.balance += amount
            
            db.commit()
            db.refresh(user)
            
            logger.info(f"Added {amount} to user balance: {telegram_id}, new balance: {user.balance}")
            return user
            
        except Exception as e:
            logger.error(f"Error adding to user balance: {e}")
            db.rollback()
            return None
    
    @staticmethod
    def subtract_balance(db: Session, telegram_id: str, amount: int) -> Optional[User]:
        """–°–ø–∏—Å–∞—Ç—å –¥–µ–Ω—å–≥–∏ —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user = UserService.get_user_by_telegram_id(db, telegram_id)
            if not user:
                logger.error(f"User not found for balance subtraction: {telegram_id}")
                return None
            
            if user.balance < amount:
                logger.warning(f"Insufficient balance for user {telegram_id}: {user.balance} < {amount}")
                return None
            
            user.balance -= amount
            
            db.commit()
            db.refresh(user)
            
            logger.info(f"Subtracted {amount} from user balance: {telegram_id}, new balance: {user.balance}")
            return user
            
        except Exception as e:
            logger.error(f"Error subtracting from user balance: {e}")
            db.rollback()
            return None
    
    @staticmethod
    def authenticate_telegram_user(init_data: str) -> Optional[dict]:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram WebApp"""
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram WebApp
            user_data = validate_telegram_init_data(init_data)
            if not user_data:
                logger.warning("Invalid Telegram init data")
                return None
            
            logger.info(f"Telegram user authenticated: {user_data.get('id')}")
            return user_data
            
        except Exception as e:
            logger.error(f"Error authenticating Telegram user: {e}")
            return None
    
    @staticmethod
    def get_or_create_user_from_telegram(db: Session, telegram_user_data: dict) -> Optional[User]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö Telegram"""
        try:
            telegram_id = str(telegram_user_data.get("id"))
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = UserService.get_user_by_telegram_id(db, telegram_id)
            if user:
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
                user.username = telegram_user_data.get("username")
                user.first_name = telegram_user_data.get("first_name")
                user.last_name = telegram_user_data.get("last_name")
                db.commit()
                return user
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = UserCreate(
                telegram_id=telegram_id,
                username=telegram_user_data.get("username"),
                first_name=telegram_user_data.get("first_name"),
                last_name=telegram_user_data.get("last_name"),
                balance=0,  # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç —Å –Ω—É–ª–µ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
                is_admin=False
            )
            
            return UserService.create_user(db, user_data)
            
        except Exception as e:
            logger.error(f"Error getting or creating user from Telegram: {e}")
            return None
    
    @staticmethod
    def set_admin_status(db: Session, telegram_id: str, is_admin: bool) -> Optional[User]:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            user = UserService.get_user_by_telegram_id(db, telegram_id)
            if not user:
                logger.error(f"User not found for admin status update: {telegram_id}")
                return None
            
            user.is_admin = is_admin
            
            db.commit()
            db.refresh(user)
            
            logger.info(f"Admin status updated for user {telegram_id}: {is_admin}")
            return user
            
        except Exception as e:
            logger.error(f"Error updating admin status: {e}")
            db.rollback()
            return None
    
    @staticmethod
    def format_balance(balance_kopecks: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        rubles = balance_kopecks / 100
        return f"‚ÇΩ{rubles:.2f}"
    
    @staticmethod
    def _generate_id() -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID"""
        import uuid
        return str(uuid.uuid4())

================================================================================
FILE: backend/app/services/__init__.py
================================================================================



================================================================================
FILE: backend/app/services/order_service.py
================================================================================

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Optional, List
from sqlalchemy.orm import Session
from sqlalchemy import and_
from ..core.config import settings
from ..models.models import Order, User, Country, Service, Message
from ..schemas.schemas import OrderCreate, OrderStatus
from .sms.adapter import SMSProviderFactory

logger = logging.getLogger(__name__)

class OrderService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏"""
    
    def __init__(self):
        self.sms_provider = None
        self._init_sms_provider()
    
    def _init_sms_provider(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å SMS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        try:
            self.sms_provider = SMSProviderFactory.create_provider(
                settings.sms_provider,
                api_key=settings.sms_api_key,
                api_url=settings.sms_api_url
            )
            logger.info(f"SMS provider initialized: {settings.sms_provider}")
        except Exception as e:
            logger.error(f"Failed to initialize SMS provider: {e}")
    
    async def create_order(self, db: Session, order_data: OrderCreate) -> Optional[Order]:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = db.query(User).filter(User.telegram_id == order_data.telegram_id).first()
            if not user:
                logger.error(f"User not found: {order_data.telegram_id}")
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–Ω—É –∏ —Å–µ—Ä–≤–∏—Å
            country = db.query(Country).filter(Country.id == order_data.country_id).first()
            service = db.query(Service).filter(Service.id == order_data.service_id).first()
            
            if not country or not service:
                logger.error("Country or service not found")
                return None
            
            if not country.available or not service.available:
                logger.error("Country or service not available")
                return None
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—É
            price = max(country.price_from, service.price_from)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
            if user.balance < price:
                logger.error(f"Insufficient balance: {user.balance} < {price}")
                return None
            
            # –ó–∞–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ SMS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            sms_result = await self._order_phone_number(country.code, service.name)
            if not sms_result or not sms_result.success:
                logger.error(f"Failed to order phone number: {sms_result.error_message if sms_result else 'Unknown error'}")
                return None
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
            order = Order(
                id=self._generate_id(),
                phone_number=sms_result.phone_number,
                country_id=order_data.country_id,
                service_id=order_data.service_id,
                user_telegram_id=order_data.telegram_id,
                price=price,
                status=OrderStatus.PENDING.value,
                expires_at=datetime.now() + timedelta(minutes=settings.order_timeout_minutes),
                external_order_id=sms_result.external_order_id
            )
            
            # –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏ —Å –±–∞–ª–∞–Ω—Å–∞
            user.balance -= price
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            db.add(order)
            db.commit()
            db.refresh(order)
            
            logger.info(f"Order created: {order.id}, phone: {order.phone_number}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
            asyncio.create_task(self._monitor_order_expiration(order.id))
            
            return order
            
        except Exception as e:
            logger.error(f"Error creating order: {e}")
            db.rollback()
            return None
    
    async def cancel_order(self, db: Session, order_id: str, user_telegram_id: str) -> bool:
        """–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"""
        try:
            order = db.query(Order).filter(
                and_(
                    Order.id == order_id,
                    Order.user_telegram_id == user_telegram_id,
                    Order.status == OrderStatus.PENDING.value
                )
            ).first()
            
            if not order:
                logger.warning(f"Order not found or cannot be cancelled: {order_id}")
                return False
            
            # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ SMS —Å–µ—Ä–≤–∏—Å–µ
            if order.external_order_id and self.sms_provider:
                try:
                    await self.sms_provider.cancel_order(order.external_order_id)
                except Exception as e:
                    logger.warning(f"Failed to cancel order in SMS service: {e}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏
            user = db.query(User).filter(User.telegram_id == user_telegram_id).first()
            if user:
                user.balance += order.price
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            order.status = OrderStatus.CANCELLED.value
            
            db.commit()
            logger.info(f"Order cancelled: {order_id}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
            await self._notify_order_status_change(order, "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω")
            
            return True
            
        except Exception as e:
            logger.error(f"Error cancelling order: {e}")
            db.rollback()
            return False
    
    async def get_user_orders(self, db: Session, user_telegram_id: str) -> List[Order]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return db.query(Order).filter(
            Order.user_telegram_id == user_telegram_id
        ).order_by(Order.created_at.desc()).all()
    
    async def get_active_orders(self, db: Session) -> List[Order]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã"""
        return db.query(Order).filter(
            Order.status == OrderStatus.PENDING.value
        ).all()
    
    async def _order_phone_number(self, country_code: str, service_name: str):
        """–ó–∞–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ SMS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        if not self.sms_provider:
            logger.error("SMS provider not initialized")
            return None
        
        try:
            service_code = self.sms_provider.map_service_name_to_code(service_name)
            country_code = self.sms_provider.map_country_code(country_code)
            
            return await self.sms_provider.order_number(country_code, service_code)
            
        except Exception as e:
            logger.error(f"Error ordering phone number: {e}")
            return None
    
    async def _monitor_order_expiration(self, order_id: str):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏—Å—Ç–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–∫–∞–∑–∞"""
        try:
            # –ñ–¥–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
            await asyncio.sleep(settings.order_timeout_minutes * 60)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑
            db = next(self._get_db())
            try:
                order = db.query(Order).filter(Order.id == order_id).first()
                if not order:
                    return
                
                # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –≤—Å–µ –µ—â–µ pending, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ expired –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏
                if order.status == OrderStatus.PENDING.value:
                    await self._expire_order(db, order)
                    
            finally:
                db.close()
                
        except Exception as e:
            logger.error(f"Error monitoring order expiration: {e}")
    
    async def _expire_order(self, db: Session, order: Order):
        """–ü–æ–º–µ—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –∫–∞–∫ –∏—Å—Ç–µ–∫—à–∏–π –∏ –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏"""
        try:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏
            user = db.query(User).filter(User.telegram_id == order.user_telegram_id).first()
            if user:
                user.balance += order.price
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            order.status = OrderStatus.EXPIRED.value
            
            # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ SMS —Å–µ—Ä–≤–∏—Å–µ
            if order.external_order_id and self.sms_provider:
                try:
                    await self.sms_provider.cancel_order(order.external_order_id)
                except Exception as e:
                    logger.warning(f"Failed to cancel expired order in SMS service: {e}")
            
            db.commit()
            logger.info(f"Order expired: {order.id}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
            await self._notify_order_status_change(order, "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ, –¥–µ–Ω—å–≥–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"Error expiring order: {e}")
            db.rollback()
    
    async def _notify_order_status_change(self, order: Order, message: str):
        """–£–≤–µ–¥–æ–º–∏—Ç—å –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
        try:
            from ..api.sse import sse_manager
            
            await sse_manager.send_to_user(
                user_id=order.user_telegram_id,
                event_type="order_status_updated",
                data={
                    "order_id": order.id,
                    "status": order.status,
                    "message": message
                }
            )
        except Exception as e:
            logger.error(f"Error sending order status notification: {e}")
    
    def _generate_id(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID"""
        import uuid
        return str(uuid.uuid4())
    
    def _get_db(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –ë–î"""
        from ..core.database import get_db
        return get_db()

# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤
class OrderCleanupService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤"""
    
    @staticmethod
    async def cleanup_expired_orders():
        """–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ –∑–∞–∫–∞–∑—ã"""
        db = next(get_db())
        try:
            expired_orders = db.query(Order).filter(
                and_(
                    Order.status == OrderStatus.PENDING.value,
                    Order.expires_at < datetime.now()
                )
            ).all()
            
            order_service = OrderService()
            for order in expired_orders:
                await order_service._expire_order(db, order)
                
            if expired_orders:
                logger.info(f"Cleaned up {len(expired_orders)} expired orders")
                
        except Exception as e:
            logger.error(f"Error in cleanup task: {e}")
        finally:
            db.close()

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É
async def start_cleanup_task():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏"""
    while True:
        try:
            await OrderCleanupService.cleanup_expired_orders()
            await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        except Exception as e:
            logger.error(f"Error in cleanup task loop: {e}")
            await asyncio.sleep(60)

================================================================================
FILE: backend/app/services/sms/validator.py
================================================================================

import re
import logging
from datetime import datetime
from typing import Optional, Dict, Any
from ...schemas.schemas import SMSWebhookData, Message

logger = logging.getLogger(__name__)

class SMSValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä SMS –¥–∞–Ω–Ω—ã—Ö - –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤–æ —Ñ—Ä–æ–Ω—Ç"""
    
    @staticmethod
    def extract_verification_code(message_text: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á—å –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ SMS —Ç–µ–∫—Å—Ç–∞"""
        if not message_text:
            return None
        
        # –†–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–¥–∞
        patterns = [
            r'\b(\d{4,6})\b',  # 4-6 —Ü–∏—Ñ—Ä –ø–æ–¥—Ä—è–¥
            r'–∫–æ–¥:?\s*(\d+)',  # "–∫–æ–¥: 12345"
            r'code:?\s*(\d+)',  # "code: 12345" 
            r'verification:?\s*(\d+)',  # "verification: 12345"
            r'confirm:?\s*(\d+)',  # "confirm: 12345"
            r'your\s+code:?\s*(\d+)',  # "your code: 12345"
            r'(\d+)\s+is\s+your',  # "12345 is your code"
            r'(\d{4,6})\D',  # 4-6 —Ü–∏—Ñ—Ä —Å –Ω–µ-—Ü–∏—Ñ—Ä–æ–π –ø–æ—Å–ª–µ
        ]
        
        for pattern in patterns:
            matches = re.findall(pattern, message_text, re.IGNORECASE)
            for match in matches:
                if isinstance(match, tuple):
                    match = match[0]
                if 4 <= len(match) <= 6 and match.isdigit():
                    logger.info(f"Extracted code '{match}' from message: {message_text}")
                    return match
        
        logger.warning(f"No verification code found in message: {message_text}")
        return None
    
    @staticmethod
    def validate_phone_number(phone_number: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        if not phone_number:
            return False
        
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ +
        clean_number = re.sub(r'[^\d+]', '', phone_number)
        
        # –î–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å + –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 10 –¥–æ 15 —Ü–∏—Ñ—Ä
        pattern = r'^\+\d{10,15}
        is_valid = bool(re.match(pattern, clean_number))
        
        if not is_valid:
            logger.warning(f"Invalid phone number format: {phone_number}")
        
        return is_valid
    
    @staticmethod
    def sanitize_message_text(message_text: str) -> str:
        """–û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        if not message_text:
            return ""
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        cleaned = re.sub(r'\s+', ' ', message_text.strip())
        
        # –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–ª–æ–º–∞—Ç—å JSON
        cleaned = re.sub(r'[\x00-\x1f\x7f-\x9f]', '', cleaned)
        
        return cleaned
    
    @staticmethod
    def validate_webhook_data(data: Dict[str, Any]) -> Optional[SMSWebhookData]:
        """–í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∞ –æ—Ç SMS —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            required_fields = ['order_id', 'phone_number', 'message_text']
            for field in required_fields:
                if field not in data or not data[field]:
                    logger.error(f"Missing required field in webhook data: {field}")
                    return None
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            if not SMSValidator.validate_phone_number(data['phone_number']):
                logger.error(f"Invalid phone number in webhook: {data['phone_number']}")
                return None
            
            # –û—á–∏—Å—Ç–∫–∞ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–¥–∞
            message_text = SMSValidator.sanitize_message_text(data['message_text'])
            code = SMSValidator.extract_verification_code(message_text)
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            webhook_data = SMSWebhookData(
                order_id=str(data['order_id']),
                phone_number=data['phone_number'],
                message_text=message_text,
                code=code,
                timestamp=data.get('timestamp', datetime.now())
            )
            
            logger.info(f"Successfully validated webhook data for order: {webhook_data.order_id}")
            return webhook_data
            
        except Exception as e:
            logger.error(f"Error validating webhook data: {e}")
            return None
    
    @staticmethod
    def prepare_frontend_message(order_id: str, message_text: str, code: Optional[str] = None) -> Dict[str, Any]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥"""
        
        # –ï—Å–ª–∏ –∫–æ–¥ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å
        if not code:
            code = SMSValidator.extract_verification_code(message_text)
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
        clean_text = SMSValidator.sanitize_message_text(message_text)
        
        frontend_data = {
            "order_id": order_id,
            "message_text": clean_text,
            "code": code,
            "has_code": bool(code),
            "received_at": datetime.now().isoformat(),
            "status": "received"
        }
        
        logger.info(f"Prepared frontend message for order {order_id}: code={'found' if code else 'not found'}")
        return frontend_data
    
    @staticmethod
    def validate_order_status_transition(current_status: str, new_status: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
        
        valid_transitions = {
            "pending": ["received", "expired", "cancelled"],
            "received": [],  # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            "expired": [],   # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            "cancelled": []  # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        }
        
        if current_status not in valid_transitions:
            logger.error(f"Invalid current status: {current_status}")
            return False
        
        if new_status not in valid_transitions[current_status]:
            logger.warning(f"Invalid status transition: {current_status} -> {new_status}")
            return False
        
        return True
    
    @staticmethod
    def is_message_duplicate(existing_messages: list, new_message_text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–º"""
        if not existing_messages or not new_message_text:
            return False
        
        clean_new = SMSValidator.sanitize_message_text(new_message_text)
        
        for msg in existing_messages:
            if hasattr(msg, 'text'):
                existing_text = SMSValidator.sanitize_message_text(msg.text)
                if existing_text == clean_new:
                    logger.warning(f"Duplicate message detected: {clean_new}")
                    return True
        
        return False

================================================================================
FILE: backend/app/services/sms/adapter.py
================================================================================

from abc import ABC, abstractmethod
from typing import Optional, Dict, Any
from dataclasses import dataclass
import logging

logger = logging.getLogger(__name__)

@dataclass
class SMSOrderResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–∫–∞–∑–∞ –Ω–æ–º–µ—Ä–∞ –æ—Ç SMS —Å–µ—Ä–≤–∏—Å–∞"""
    success: bool
    phone_number: Optional[str] = None
    external_order_id: Optional[str] = None
    error_message: Optional[str] = None
    balance: Optional[float] = None

@dataclass
class SMSStatusResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
    success: bool
    status: str  # waiting, received, expired, cancelled
    message_text: Optional[str] = None
    code: Optional[str] = None
    error_message: Optional[str] = None

class SMSAdapter(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å SMS —Å–µ—Ä–≤–∏—Å–∞–º–∏"""
    
    def __init__(self, api_key: str, api_url: str, **kwargs):
        self.api_key = api_key
        self.api_url = api_url
        self.config = kwargs
        
    @abstractmethod
    async def get_balance(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞"""
        pass
    
    @abstractmethod
    async def get_available_numbers(self, country_code: str, service_code: str) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤"""
        pass
    
    @abstractmethod
    async def order_number(self, country_code: str, service_code: str) -> SMSOrderResult:
        """–ó–∞–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        pass
    
    @abstractmethod
    async def get_sms(self, external_order_id: str) -> SMSStatusResult:
        """–ü–æ–ª—É—á–∏—Ç—å SMS –ø–æ ID –∑–∞–∫–∞–∑–∞"""
        pass
    
    @abstractmethod
    async def cancel_order(self, external_order_id: str) -> bool:
        """–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"""
        pass
    
    @abstractmethod
    async def get_order_status(self, external_order_id: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞"""
        pass
    
    def extract_code_from_message(self, message_text: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á—å –∫–æ–¥ –∏–∑ SMS —Å–æ–æ–±—â–µ–Ω–∏—è"""
        import re
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–¥–∞
        patterns = [
            r'\b(\d{4,6})\b',  # 4-6 —Ü–∏—Ñ—Ä –ø–æ–¥—Ä—è–¥
            r'–∫–æ–¥:?\s*(\d+)',  # "–∫–æ–¥: 12345"
            r'code:?\s*(\d+)',  # "code: 12345"
            r'verification:?\s*(\d+)',  # "verification: 12345"
        ]
        
        for pattern in patterns:
            match = re.search(pattern, message_text, re.IGNORECASE)
            if match:
                code = match.group(1)
                if 4 <= len(code) <= 6:  # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–ª–∏–Ω–µ
                    return code
        
        return None
    
    def map_service_name_to_code(self, service_name: str) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –≤ –∫–æ–¥ –¥–ª—è API"""
        mapping = {
            "telegram": "tg",
            "whatsapp": "wa", 
            "discord": "ds",
            "viber": "vi",
            "signal": "sg"
        }
        return mapping.get(service_name.lower(), service_name.lower())
    
    def map_country_code(self, country_code: str) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç SMS —Å–µ—Ä–≤–∏—Å–∞"""
        # –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–¥—ã
        return country_code.lower()

class SMSProviderFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è SMS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    
    _providers = {}
    
    @classmethod
    def register_provider(cls, name: str, provider_class):
        """–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        cls._providers[name] = provider_class
        logger.info(f"Registered SMS provider: {name}")
    
    @classmethod
    def create_provider(cls, provider_name: str, **config) -> SMSAdapter:
        """–°–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        if provider_name not in cls._providers:
            raise ValueError(f"Unknown SMS provider: {provider_name}")
        
        provider_class = cls._providers[provider_name]
        return provider_class(**config)
    
    @classmethod
    def get_available_providers(cls) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
        return list(cls._providers.keys())

================================================================================
FILE: backend/app/services/sms/__init__.py
================================================================================



================================================================================
FILE: backend/app/services/sms/webhook.py
================================================================================

import asyncio
import logging
from typing import Dict, Any, Optional
from datetime import datetime
from sqlalchemy.orm import Session
from ...core.database import get_db
from ...models.models import Order, Message, User
from ...schemas.schemas import SMSWebhookData, OrderStatus, MessageCreate
from .validator import SMSValidator
from ..order_service import OrderService

logger = logging.getLogger(__name__)

class SMSWebhookHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç SMS —Å–µ—Ä–≤–∏—Å–æ–≤"""
    
    def __init__(self):
        self.order_service = OrderService()
    
    async def process_webhook(self, webhook_data: Dict[str, Any], provider_name: str = "unknown") -> bool:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞
        
        Args:
            webhook_data: –î–∞–Ω–Ω—ã–µ –æ—Ç SMS —Å–µ—Ä–≤–∏—Å–∞
            provider_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            logger.info(f"Processing webhook from {provider_name}: {webhook_data}")
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            validated_data = SMSValidator.validate_webhook_data(webhook_data)
            if not validated_data:
                logger.error("Webhook data validation failed")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
            db = next(get_db())
            try:
                return await self._process_validated_webhook(db, validated_data, provider_name)
            finally:
                db.close()
                
        except Exception as e:
            logger.error(f"Error processing webhook: {e}")
            return False
    
    async def _process_validated_webhook(self, db: Session, data: SMSWebhookData, provider_name: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∞"""
        
        # –ò—â–µ–º –∑–∞–∫–∞–∑ –ø–æ ID –∏–ª–∏ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        order = await self._find_order(db, data.order_id, data.phone_number)
        if not order:
            logger.warning(f"Order not found for webhook data: {data.order_id}, {data.phone_number}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑
        if not SMSValidator.validate_order_status_transition(order.status, "received"):
            logger.warning(f"Invalid status transition for order {order.id}: {order.status} -> received")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        existing_messages = db.query(Message).filter(Message.order_id == order.id).all()
        if SMSValidator.is_message_duplicate(existing_messages, data.message_text):
            logger.info(f"Duplicate message ignored for order {order.id}")
            return True
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_data = MessageCreate(
            order_id=order.id,
            text=data.message_text,
            code=data.code
        )
        
        message = Message(
            id=self._generate_id(),
            order_id=message_data.order_id,
            text=message_data.text,
            code=message_data.code,
            received_at=datetime.now()
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        order.status = OrderStatus.RECEIVED.value
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.add(message)
        db.commit()
        db.refresh(message)
        db.refresh(order)
        
        logger.info(f"SMS processed successfully for order {order.id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —á–µ—Ä–µ–∑ SSE
        await self._notify_frontend(order, message)
        
        return True
    
    async def _find_order(self, db: Session, order_id: str, phone_number: str) -> Optional[Order]:
        """–ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑ –ø–æ ID –∏–ª–∏ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ –ø—Ä—è–º–æ–º—É ID
        order = db.query(Order).filter(Order.id == order_id).first()
        if order:
            return order
        
        # –ó–∞—Ç–µ–º –ø–æ external_order_id (ID –æ—Ç SMS —Å–µ—Ä–≤–∏—Å–∞)
        order = db.query(Order).filter(Order.external_order_id == order_id).first()
        if order:
            return order
        
        # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ —Å—Ç–∞—Ç—É—Å—É pending
        order = db.query(Order).filter(
            Order.phone_number == phone_number,
            Order.status == OrderStatus.PENDING.value
        ).first()
        
        return order
    
    async def _notify_frontend(self, order: Order, message: Message):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —á–µ—Ä–µ–∑ SSE"""
        try:
            from ...api.sse import sse_manager
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
            frontend_data = SMSValidator.prepare_frontend_message(
                order_id=order.id,
                message_text=message.text,
                code=message.code
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await sse_manager.send_to_user(
                user_id=order.user_telegram_id,
                event_type="sms_received",
                data=frontend_data
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
            await sse_manager.send_to_user(
                user_id=order.user_telegram_id,
                event_type="order_status_updated",
                data={
                    "order_id": order.id,
                    "status": order.status,
                    "message": "SMS –∫–æ–¥ –ø–æ–ª—É—á–µ–Ω!"
                }
            )
            
            logger.info(f"Frontend notifications sent for order {order.id}")
            
        except Exception as e:
            logger.error(f"Error sending frontend notification: {e}")
    
    def _generate_id(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID"""
        import uuid
        return str(uuid.uuid4())
    
    async def handle_provider_specific_webhook(self, provider_name: str, raw_data: Dict[str, Any]) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–µ–±—Ö—É–∫ –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫—É—é –ª–æ–≥–∏–∫—É –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        provider_handlers = {
            "dummy": self._handle_dummy_webhook,
            "smshub": self._handle_smshub_webhook,
            "5sim": self._handle_5sim_webhook,
        }
        
        handler = provider_handlers.get(provider_name, self._handle_generic_webhook)
        return await handler(raw_data)
    
    async def _handle_dummy_webhook(self, raw_data: Dict[str, Any]) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–µ–±—Ö—É–∫ –æ—Ç dummy –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        # Dummy –ø—Ä–æ–≤–∞–π–¥–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        return await self.process_webhook(raw_data, "dummy")
    
    async def _handle_smshub_webhook(self, raw_data: Dict[str, Any]) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–µ–±—Ö—É–∫ –æ—Ç SMSHub"""
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç SMSHub –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
        try:
            webhook_data = {
                "order_id": raw_data.get("id"),
                "phone_number": raw_data.get("phone"),
                "message_text": raw_data.get("text"),
                "timestamp": datetime.now()
            }
            return await self.process_webhook(webhook_data, "smshub")
        except Exception as e:
            logger.error(f"Error processing SMSHub webhook: {e}")
            return False
    
    async def _handle_5sim_webhook(self, raw_data: Dict[str, Any]) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–µ–±—Ö—É–∫ –æ—Ç 5sim"""
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç 5sim –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
        try:
            webhook_data = {
                "order_id": raw_data.get("order_id"),
                "phone_number": raw_data.get("number"),
                "message_text": raw_data.get("sms"),
                "timestamp": datetime.now()
            }
            return await self.process_webhook(webhook_data, "5sim")
        except Exception as e:
            logger.error(f"Error processing 5sim webhook: {e}")
            return False
    
    async def _handle_generic_webhook(self, raw_data: Dict[str, Any]) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–µ–±—Ö—É–∫ –æ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        logger.warning(f"Using generic webhook handler for data: {raw_data}")
        return await self.process_webhook(raw_data, "generic")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ä–æ—É—Ç–∞—Ö
webhook_handler = SMSWebhookHandler()

================================================================================
FILE: backend/app/services/sms/providers/__init__.py
================================================================================



================================================================================
FILE: backend/app/services/sms/providers/dummy_provider.py
================================================================================

import asyncio
import random
from datetime import datetime
from typing import Optional
import logging
from ..adapter import SMSAdapter, SMSOrderResult, SMSStatusResult, SMSProviderFactory

logger = logging.getLogger(__name__)

class DummyProvider(SMSAdapter):
    """–ó–∞–≥–ª—É—à–∫–∞ SMS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, **kwargs):
        super().__init__("dummy_api_key", "http://dummy-api.com", **kwargs)
        self.balance = 1000.0
        self.orders = {}  # –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–∫–∞–∑–æ–≤
        logger.info("Initialized Dummy SMS Provider")
    
    async def get_balance(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å"""
        await asyncio.sleep(0.1)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ API
        logger.info(f"Balance requested: {self.balance}")
        return self.balance
    
    async def get_available_numbers(self, country_code: str, service_code: str) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–º–µ—Ä–æ–≤"""
        await asyncio.sleep(0.1)
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω
        counts = {
            "ru": random.randint(100, 1000),
            "ua": random.randint(50, 500), 
            "kz": random.randint(10, 100),
            "us": 0  # –°–®–ê –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
        }
        
        count = counts.get(country_code.lower(), random.randint(1, 50))
        logger.info(f"Available numbers for {country_code}/{service_code}: {count}")
        return count
    
    async def order_number(self, country_code: str, service_code: str) -> SMSOrderResult:
        """–ò–º–∏—Ç–∏—Ä—É–µ—Ç –∑–∞–∫–∞–∑ –Ω–æ–º–µ—Ä–∞"""
        await asyncio.sleep(0.2)
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç—Ä–∞–Ω
        if country_code.lower() == "us":
            return SMSOrderResult(
                success=False,
                error_message="Country not available"
            )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä
        phone_patterns = {
            "ru": f"+7 916 {random.randint(100, 999)}-{random.randint(10, 99)}-{random.randint(10, 99)}",
            "ua": f"+380 {random.randint(50, 99)} {random.randint(100, 999)}-{random.randint(10, 99)}-{random.randint(10, 99)}",
            "kz": f"+7 {random.randint(700, 799)} {random.randint(100, 999)}-{random.randint(10, 99)}-{random.randint(10, 99)}"
        }
        
        phone_number = phone_patterns.get(country_code.lower(), f"+{random.randint(1, 999)} {random.randint(1000000, 9999999)}")
        external_order_id = f"dummy_{random.randint(100000, 999999)}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
        self.orders[external_order_id] = {
            "phone_number": phone_number,
            "country_code": country_code,
            "service_code": service_code,
            "status": "waiting",
            "created_at": datetime.now(),
            "message_text": None,
            "code": None
        }
        
        # –£–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–∞–Ω—Å
        price = random.randint(15, 50)
        self.balance -= price
        
        logger.info(f"Ordered number: {phone_number} (ID: {external_order_id})")
        
        return SMSOrderResult(
            success=True,
            phone_number=phone_number,
            external_order_id=external_order_id,
            balance=self.balance
        )
    
    async def get_sms(self, external_order_id: str) -> SMSStatusResult:
        """–ò–º–∏—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ SMS"""
        await asyncio.sleep(0.1)
        
        if external_order_id not in self.orders:
            return SMSStatusResult(
                success=False,
                status="not_found",
                error_message="Order not found"
            )
        
        order = self.orders[external_order_id]
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ SMS —á–µ—Ä–µ–∑ —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è
        elapsed_minutes = (datetime.now() - order["created_at"]).total_seconds() / 60
        
        if order["status"] == "waiting" and elapsed_minutes > random.uniform(1, 5):
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ SMS
            codes = ["12345", "67890", "54321", "98765", "11111"]
            services_messages = {
                "tg": f"Telegram code: {random.choice(codes)}",
                "wa": f"WhatsApp code: {random.choice(codes)}", 
                "ds": f"Discord verification code: {random.choice(codes)}"
            }
            
            message_text = services_messages.get(
                order["service_code"], 
                f"Verification code: {random.choice(codes)}"
            )
            
            code = self.extract_code_from_message(message_text)
            
            order["status"] = "received"
            order["message_text"] = message_text
            order["code"] = code
            
            logger.info(f"SMS received for order {external_order_id}: {message_text}")
            
            return SMSStatusResult(
                success=True,
                status="received",
                message_text=message_text,
                code=code
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        if elapsed_minutes > 15:
            order["status"] = "expired"
            return SMSStatusResult(
                success=True,
                status="expired"
            )
        
        return SMSStatusResult(
            success=True,
            status=order["status"]
        )
    
    async def cancel_order(self, external_order_id: str) -> bool:
        """–ò–º–∏—Ç–∏—Ä—É–µ—Ç –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–∞"""
        await asyncio.sleep(0.1)
        
        if external_order_id in self.orders:
            order = self.orders[external_order_id]
            if order["status"] == "waiting":
                order["status"] = "cancelled"
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏
                self.balance += random.randint(15, 50)
                logger.info(f"Order {external_order_id} cancelled, balance restored")
                return True
        
        return False
    
    async def get_order_status(self, external_order_id: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞"""
        await asyncio.sleep(0.1)
        
        if external_order_id not in self.orders:
            return "not_found"
        
        return self.orders[external_order_id]["status"]

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
SMSProviderFactory.register_provider("dummy", DummyProvider)

================================================================================
FILE: backend/app/core/__init__.py
================================================================================



================================================================================
FILE: backend/app/core/config.py
================================================================================

from pydantic_settings import BaseSettings
from typing import List
import os

class Settings(BaseSettings):
    # Database
    database_url: str = "sqlite:///./onlinesim.db"
    database_echo: bool = False
    
    # FastAPI
    secret_key: str = "your-secret-key-here"
    debug: bool = True
    cors_origins: List[str] = ["http://localhost:5173", "http://localhost:3000"]
    
    # SMS Service
    sms_provider: str = "dummy"
    sms_api_key: str = ""
    sms_api_url: str = "https://api.sms-service.com"
    sms_webhook_secret: str = "webhook-secret-key"
    
    # Order Settings
    order_timeout_minutes: int = 15
    api_timeout_seconds: int = 30
    retry_attempts: int = 3
    
    # Telegram Bot
    telegram_bot_token: str = ""
    telegram_webhook_url: str = ""
    webapp_url: str = "http://localhost:3000"
    
    # Server
    host: str = "0.0.0.0"
    port: int = 8000
    frontend_port: int = 3000
    
    # Logging
    log_level: str = "INFO"
    
    class Config:
        env_file = ".env"
        case_sensitive = False

settings = Settings()

================================================================================
FILE: backend/app/core/database.py
================================================================================

from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from .config import settings

engine = create_engine(
    settings.database_url,
    echo=settings.database_echo,
    connect_args={"check_same_thread": False} if "sqlite" in settings.database_url else {}
)

SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base = declarative_base()

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

def create_tables():
    Base.metadata.create_all(bind=engine)

================================================================================
FILE: backend/app/models/__init__.py
================================================================================



================================================================================
FILE: backend/app/models/models.py
================================================================================

from sqlalchemy import Column, Integer, String, Boolean, DateTime, Text, ForeignKey
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
from ..core.database import Base

class Country(Base):
    __tablename__ = "countries"
    
    id = Column(String, primary_key=True)
    name = Column(Text, nullable=False)
    code = Column(Text, nullable=False, unique=True)
    flag = Column(Text, nullable=False)
    price_from = Column(Integer, nullable=False)
    available = Column(Boolean, nullable=False, default=True)
    numbers_count = Column(Integer, nullable=False, default=0)
    status = Column(Text, nullable=False, default="available")  # available, low, unavailable

class Service(Base):
    __tablename__ = "services"
    
    id = Column(String, primary_key=True)
    name = Column(Text, nullable=False)
    icon = Column(Text, nullable=False)
    price_from = Column(Integer, nullable=False)
    price_to = Column(Integer, nullable=False)
    available = Column(Boolean, nullable=False, default=True)

class Order(Base):
    __tablename__ = "orders"
    
    id = Column(String, primary_key=True)
    phone_number = Column(Text, nullable=False)
    country_id = Column(String, ForeignKey("countries.id"), nullable=False)
    service_id = Column(String, ForeignKey("services.id"), nullable=False)
    user_telegram_id = Column(String, ForeignKey("users.telegram_id"), nullable=False)
    price = Column(Integer, nullable=False)
    status = Column(Text, nullable=False, default="pending")  # pending, received, expired, cancelled
    expires_at = Column(DateTime, nullable=False)
    created_at = Column(DateTime, nullable=False, default=func.now())
    
    # SMS service specific fields
    external_order_id = Column(String, nullable=True)  # ID –æ—Ç SMS —Å–µ—Ä–≤–∏—Å–∞
    
    # Relationships
    country = relationship("Country")
    service = relationship("Service")
    user = relationship("User")
    messages = relationship("Message", back_populates="order")

class Message(Base):
    __tablename__ = "messages"
    
    id = Column(String, primary_key=True)
    order_id = Column(String, ForeignKey("orders.id"), nullable=False)
    text = Column(Text, nullable=False)
    code = Column(Text, nullable=True)
    received_at = Column(DateTime, nullable=False, default=func.now())
    
    # Relationship
    order = relationship("Order", back_populates="messages")

class User(Base):
    __tablename__ = "users"
    
    id = Column(String, primary_key=True)
    telegram_id = Column(String, nullable=False, unique=True, index=True)
    username = Column(Text, nullable=True)
    first_name = Column(Text, nullable=True)
    last_name = Column(Text, nullable=True)
    balance = Column(Integer, nullable=False, default=0)  # in kopecks
    is_admin = Column(Boolean, nullable=False, default=False)
    created_at = Column(DateTime, nullable=False, default=func.now())
    
    # Relationships
    orders = relationship("Order")

class Setting(Base):
    __tablename__ = "settings"
    
    id = Column(String, primary_key=True)
    key = Column(Text, nullable=False, unique=True)
    value = Column(Text, nullable=False)
    description = Column(Text, nullable=True)
    updated_at = Column(DateTime, nullable=False, default=func.now(), onupdate=func.now())

class Statistic(Base):
    __tablename__ = "statistics"
    
    id = Column(String, primary_key=True)
    date = Column(Text, nullable=False, unique=True)  # YYYY-MM-DD
    total_orders = Column(Integer, nullable=False, default=0)
    total_revenue = Column(Integer, nullable=False, default=0)  # in kopecks
    new_users = Column(Integer, nullable=False, default=0)
    active_users = Column(Integer, nullable=False, default=0)

================================================================================
FILE: backend/app/api/sse.py
================================================================================

import asyncio
import json
import logging
from typing import Dict, List, Any, Optional
from fastapi import Request
from fastapi.responses import StreamingResponse
from ..schemas.schemas import SSEEvent

logger = logging.getLogger(__name__)

class SSEManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è Server-Sent Events"""
    
    def __init__(self):
        self.connections: Dict[str, List[asyncio.Queue]] = {}
    
    async def connect(self, user_id: str) -> asyncio.Queue:
        """–ü–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ SSE"""
        queue = asyncio.Queue()
        
        if user_id not in self.connections:
            self.connections[user_id] = []
        
        self.connections[user_id].append(queue)
        logger.info(f"SSE connection added for user {user_id}")
        
        return queue
    
    async def disconnect(self, user_id: str, queue: asyncio.Queue):
        """–û—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç SSE"""
        if user_id in self.connections:
            try:
                self.connections[user_id].remove(queue)
                if not self.connections[user_id]:
                    del self.connections[user_id]
                logger.info(f"SSE connection removed for user {user_id}")
            except ValueError:
                pass
    
    async def send_to_user(self, user_id: str, event_type: str, data: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        if user_id not in self.connections:
            logger.debug(f"No SSE connections for user {user_id}")
            return
        
        event = SSEEvent(type=event_type, data=data)
        message = self._format_sse_message(event)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        disconnected_queues = []
        for queue in self.connections[user_id]:
            try:
                await queue.put(message)
            except Exception as e:
                logger.error(f"Error sending SSE message: {e}")
                disconnected_queues.append(queue)
        
        # –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        for queue in disconnected_queues:
            await self.disconnect(user_id, queue)
        
        logger.debug(f"SSE event sent to user {user_id}: {event_type}")
    
    async def broadcast(self, event_type: str, data: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        event = SSEEvent(type=event_type, data=data)
        message = self._format_sse_message(event)
        
        for user_id in list(self.connections.keys()):
            await self.send_to_user(user_id, event_type, data)
        
        logger.debug(f"SSE event broadcasted: {event_type}")
    
    def _format_sse_message(self, event: SSEEvent) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ SSE"""
        data_json = json.dumps(event.data, ensure_ascii=False)
        return f"event: {event.type}\ndata: {data_json}\n\n"
    
    def get_connection_count(self, user_id: str) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return len(self.connections.get(user_id, []))
    
    def get_total_connections(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        return sum(len(queues) for queues in self.connections.values())

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
sse_manager = SSEManager()

async def create_sse_stream(request: Request, user_id: str):
    """–°–æ–∑–¥–∞—Ç—å –ø–æ—Ç–æ–∫ SSE –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    async def event_stream():
        queue = await sse_manager.connect(user_id)
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            welcome_message = sse_manager._format_sse_message(
                SSEEvent(
                    type="connected",
                    data={
                        "message": "SSE connection established",
                        "timestamp": str(asyncio.get_event_loop().time())
                    }
                )
            )
            yield welcome_message
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º keep-alive –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            keep_alive_task = asyncio.create_task(send_keep_alive(queue))
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
            while True:
                try:
                    # –ñ–¥–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                    message = await asyncio.wait_for(queue.get(), timeout=1.0)
                    yield message
                    
                except asyncio.TimeoutError:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫–ª—é—á–∏–ª—Å—è –ª–∏ –∫–ª–∏–µ–Ω—Ç
                    if await request.is_disconnected():
                        break
                    continue
                    
                except Exception as e:
                    logger.error(f"Error in SSE stream: {e}")
                    break
            
        except Exception as e:
            logger.error(f"Error in SSE event stream: {e}")
            
        finally:
            # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
            keep_alive_task.cancel()
            await sse_manager.disconnect(user_id, queue)
    
    return event_stream()

async def send_keep_alive(queue: asyncio.Queue):
    """–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å keep-alive —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        while True:
            await asyncio.sleep(30)  # –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            
            keep_alive_message = sse_manager._format_sse_message(
                SSEEvent(
                    type="keep_alive",
                    data={"timestamp": str(asyncio.get_event_loop().time())}
                )
            )
            
            await queue.put(keep_alive_message)
            
    except asyncio.CancelledError:
        pass
    except Exception as e:
        logger.error(f"Error in keep-alive task: {e}")

def create_sse_response(request: Request, user_id: str) -> StreamingResponse:
    """–°–æ–∑–¥–∞—Ç—å SSE response"""
    return StreamingResponse(
        create_sse_stream(request, user_id),
        media_type="text/event-stream",
        headers={
            "Cache-Control": "no-cache",
            "Connection": "keep-alive",
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Headers": "Cache-Control"
        }
    )

================================================================================
FILE: backend/app/api/__init__.py
================================================================================



================================================================================
FILE: backend/app/api/routes.py
================================================================================

from fastapi import APIRouter, Depends, HTTPException, Request, status
from fastapi.responses import StreamingResponse
from sqlalchemy.orm import Session
from typing import List, Optional
import logging

from ..core.database import get_db
from ..models.models import Country, Service, Order, Message, User, Setting, Statistic
from ..schemas.schemas import (
    Country as CountrySchema, Service as ServiceSchema, 
    Order as OrderSchema, OrderCreate, OrderResponse,
    Message as MessageSchema, User as UserSchema, UserCreate,
    Setting as SettingSchema, SettingUpdate,
    Statistic as StatisticSchema, OrderStatus
)
from ..services.order_service import OrderService
from ..services.user_service import UserService
from ..services.sms.webhook import webhook_handler
from ..utils.telegram import get_current_telegram_user
from .sse import create_sse_response, sse_manager

router = APIRouter(prefix="/api")
logger = logging.getLogger(__name__)

# Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_current_user(request: Request, db: Session = Depends(get_db)) -> User:
    telegram_user = get_current_telegram_user(request)
    if not telegram_user:
        raise HTTPException(status_code=401, detail="Unauthorized")
    
    user = UserService.get_or_create_user_from_telegram(db, telegram_user)
    if not user:
        raise HTTPException(status_code=500, detail="Failed to create user")
    
    return user

# Dependency –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def require_admin(user: User = Depends(get_current_user)) -> User:
    if not user.is_admin:
        raise HTTPException(status_code=403, detail="Admin access required")
    return user

# Countries endpoints
@router.get("/countries", response_model=List[CountrySchema])
async def get_countries(db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω"""
    return db.query(Country).all()

@router.get("/countries/{country_id}", response_model=CountrySchema)
async def get_country(country_id: str, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω—É –ø–æ ID"""
    country = db.query(Country).filter(Country.id == country_id).first()
    if not country:
        raise HTTPException(status_code=404, detail="Country not found")
    return country

# Services endpoints
@router.get("/services", response_model=List[ServiceSchema])
async def get_services(db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    return db.query(Service).all()

@router.get("/services/{service_id}", response_model=ServiceSchema)
async def get_service(service_id: str, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä–≤–∏—Å –ø–æ ID"""
    service = db.query(Service).filter(Service.id == service_id).first()
    if not service:
        raise HTTPException(status_code=404, detail="Service not found")
    return service

# Orders endpoints
@router.get("/orders", response_model=List[OrderSchema])
async def get_orders(
    status: Optional[OrderStatus] = None,
    user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = db.query(Order).filter(Order.user_telegram_id == user.telegram_id)
    
    if status:
        query = query.filter(Order.status == status.value)
    
    return query.order_by(Order.created_at.desc()).all()

@router.post("/orders", response_model=OrderSchema)
async def create_order(
    order_data: OrderCreate,
    user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º telegram_id –∏–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    order_data.telegram_id = user.telegram_id
    
    order_service = OrderService()
    order = await order_service.create_order(db, order_data)
    
    if not order:
        raise HTTPException(status_code=400, detail="Failed to create order")
    
    return order

@router.delete("/orders/{order_id}")
async def cancel_order(
    order_id: str,
    user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"""
    order_service = OrderService()
    success = await order_service.cancel_order(db, order_id, user.telegram_id)
    
    if not success:
        raise HTTPException(status_code=400, detail="Failed to cancel order")
    
    return {"message": "Order cancelled successfully"}

# Messages endpoints
@router.get("/messages", response_model=List[MessageSchema])
async def get_messages(
    order_id: Optional[str] = None,
    user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if order_id:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        order = db.query(Order).filter(
            Order.id == order_id,
            Order.user_telegram_id == user.telegram_id
        ).first()
        
        if not order:
            raise HTTPException(status_code=404, detail="Order not found")
        
        return db.query(Message).filter(Message.order_id == order_id).order_by(Message.received_at.desc()).all()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –µ–≥–æ –∑–∞–∫–∞–∑—ã
    user_orders = db.query(Order).filter(Order.user_telegram_id == user.telegram_id).all()
    order_ids = [order.id for order in user_orders]
    
    return db.query(Message).filter(Message.order_id.in_(order_ids)).order_by(Message.received_at.desc()).all()

# Users endpoints
@router.get("/users/{telegram_id}", response_model=UserSchema)
async def get_user(
    telegram_id: str,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID"""
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ, –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –ª—é–±—ã–µ
    if not current_user.is_admin and current_user.telegram_id != telegram_id:
        raise HTTPException(status_code=403, detail="Access denied")
    
    user = UserService.get_user_by_telegram_id(db, telegram_id)
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    
    return user

@router.post("/users", response_model=UserSchema)
async def create_user(user_data: UserCreate, db: Session = Depends(get_db)):
    """–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = UserService.create_user(db, user_data)
    if not user:
        raise HTTPException(status_code=400, detail="Failed to create user")
    return user

# Settings endpoints (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@router.get("/settings", response_model=List[SettingSchema])
async def get_settings(admin: User = Depends(require_admin), db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    return db.query(Setting).all()

@router.get("/settings/{key}", response_model=SettingSchema)
async def get_setting(
    key: str,
    admin: User = Depends(require_admin),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ –∫–ª—é—á—É"""
    setting = db.query(Setting).filter(Setting.key == key).first()
    if not setting:
        raise HTTPException(status_code=404, detail="Setting not found")
    return setting

@router.put("/settings/{key}", response_model=SettingSchema)
async def update_setting(
    key: str,
    setting_data: SettingUpdate,
    admin: User = Depends(require_admin),
    db: Session = Depends(get_db)
):
    """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É"""
    setting = db.query(Setting).filter(Setting.key == key).first()
    if not setting:
        raise HTTPException(status_code=404, detail="Setting not found")
    
    setting.value = setting_data.value
    db.commit()
    db.refresh(setting)
    
    logger.info(f"Setting {key} updated by admin {admin.telegram_id}")
    return setting

# Statistics endpoints (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@router.get("/statistics", response_model=List[StatisticSchema])
async def get_statistics(
    start_date: Optional[str] = None,
    end_date: Optional[str] = None,
    admin: User = Depends(require_admin),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    query = db.query(Statistic)
    
    if start_date:
        query = query.filter(Statistic.date >= start_date)
    if end_date:
        query = query.filter(Statistic.date <= end_date)
    
    return query.order_by(Statistic.date.desc()).all()

# SSE endpoint
@router.get("/events")
async def events_stream(
    request: Request,
    user: User = Depends(get_current_user)
):
    """–ü–æ—Ç–æ–∫ Server-Sent Events –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return create_sse_response(request, user.telegram_id)

# Webhook endpoints
@router.post("/webhook/sms/{provider}")
async def sms_webhook(
    provider: str,
    request: Request,
    db: Session = Depends(get_db)
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç SMS —Å–µ—Ä–≤–∏—Å–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        content_type = request.headers.get("content-type", "")
        
        if "application/json" in content_type:
            webhook_data = await request.json()
        else:
            # –î–ª—è form-data
            webhook_data = dict(await request.form())
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–µ–±—Ö—É–∫
        success = await webhook_handler.handle_provider_specific_webhook(provider, webhook_data)
        
        if success:
            return {"status": "success"}
        else:
            raise HTTPException(status_code=400, detail="Failed to process webhook")
            
    except Exception as e:
        logger.error(f"Error processing webhook from {provider}: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

# Health check endpoint
@router.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "status": "healthy",
        "sse_connections": sse_manager.get_total_connections()
    }

# SSE status endpoint
@router.get("/sse/status")
async def sse_status(user: User = Depends(get_current_user)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return {
        "user_id": user.telegram_id,
        "connections": sse_manager.get_connection_count(user.telegram_id),
        "total_connections": sse_manager.get_total_connections()
    }

================================================================================
FILE: frontend/vite.config.ts
================================================================================

// frontend/vite.config.ts
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";
import runtimeErrorOverlay from "@replit/vite-plugin-runtime-error-modal";

export default defineConfig({
  plugins: [
    react(),
    runtimeErrorOverlay(),
    ...(process.env.NODE_ENV !== "production" &&
    process.env.REPL_ID !== undefined
      ? [
          await import("@replit/vite-plugin-cartographer").then((m) =>
            m.cartographer(),
          ),
        ]
      : []),
  ],
  resolve: {
    alias: {
      // Change 'client' to 'frontend'
      "@": path.resolve(import.meta.dirname, "frontend", "src"),
      "@shared": path.resolve(import.meta.dirname, "shared"),
      "@assets": path.resolve(import.meta.dirname, "attached_assets"),
    },
  },
  // Change 'client' to 'frontend'
  root: path.resolve(import.meta.dirname, "frontend"),
  build: {
    // This looks fine if you want the output in a dist/public directory
    outDir: path.resolve(import.meta.dirname, "dist/public"),
    emptyOutDir: true,
  },
  server: {
    fs: {
      strict: true,
      deny: ["**/.*"],
    },
  },
});

================================================================================
FILE: frontend/index.html
================================================================================

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1" />
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
    <!-- This is a replit script which adds a banner on the top of the page when opened in development mode outside the replit environment -->
    <script type="text/javascript" src="https://replit.com/public/js/replit-dev-banner.js"></script>
  </body>
</html>

================================================================================
FILE: frontend/tailwind.config.ts
================================================================================

import type { Config } from "tailwindcss";

export default {
  darkMode: ["class"],
  content: ["./client/index.html", "./client/src/**/*.{js,jsx,ts,tsx}"],
  theme: {
    extend: {
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      colors: {
        background: "var(--background)",
        foreground: "var(--foreground)",
        card: {
          DEFAULT: "var(--card)",
          foreground: "var(--card-foreground)",
        },
        popover: {
          DEFAULT: "var(--popover)",
          foreground: "var(--popover-foreground)",
        },
        primary: {
          DEFAULT: "var(--primary)",
          foreground: "var(--primary-foreground)",
        },
        secondary: {
          DEFAULT: "var(--secondary)",
          foreground: "var(--secondary-foreground)",
        },
        muted: {
          DEFAULT: "var(--muted)",
          foreground: "var(--muted-foreground)",
        },
        accent: {
          DEFAULT: "var(--accent)",
          foreground: "var(--accent-foreground)",
        },
        destructive: {
          DEFAULT: "var(--destructive)",
          foreground: "var(--destructive-foreground)",
        },
        border: "var(--border)",
        input: "var(--input)",
        ring: "var(--ring)",
        chart: {
          "1": "var(--chart-1)",
          "2": "var(--chart-2)",
          "3": "var(--chart-3)",
          "4": "var(--chart-4)",
          "5": "var(--chart-5)",
        },
        sidebar: {
          DEFAULT: "var(--sidebar-background)",
          foreground: "var(--sidebar-foreground)",
          primary: "var(--sidebar-primary)",
          "primary-foreground": "var(--sidebar-primary-foreground)",
          accent: "var(--sidebar-accent)",
          "accent-foreground": "var(--sidebar-accent-foreground)",
          border: "var(--sidebar-border)",
          ring: "var(--sidebar-ring)",
        },
      },
      keyframes: {
        "accordion-down": {
          from: {
            height: "0",
          },
          to: {
            height: "var(--radix-accordion-content-height)",
          },
        },
        "accordion-up": {
          from: {
            height: "var(--radix-accordion-content-height)",
          },
          to: {
            height: "0",
          },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate"), require("@tailwindcss/typography")],
} satisfies Config;


================================================================================
FILE: frontend/components.json
================================================================================

{
    "$schema": "https://ui.shadcn.com/schema.json",
    "style": "new-york",
    "rsc": false,
    "tsx": true,
    "tailwind": {
      "config": "tailwind.config.ts",
      "css": "client/src/index.css",
      "baseColor": "neutral",
      "cssVariables": true,
      "prefix": ""
    },
    "aliases": {
      "components": "@/components",
      "utils": "@/lib/utils",
      "ui": "@/components/ui",
      "lib": "@/lib",
      "hooks": "@/hooks"
    }
}

================================================================================
FILE: frontend/postcss.config.js
================================================================================

export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}


================================================================================
FILE: frontend/drizzle.config.ts
================================================================================

import { defineConfig } from "drizzle-kit";

if (!process.env.DATABASE_URL) {
  throw new Error("DATABASE_URL, ensure the database is provisioned");
}

export default defineConfig({
  out: "./migrations",
  schema: "./shared/schema.ts",
  dialect: "postgresql",
  dbCredentials: {
    url: process.env.DATABASE_URL,
  },
});


================================================================================
FILE: frontend/tsconfig.json
================================================================================

{
  "include": ["client/src/**/*", "shared/**/*", "server/**/*"],
  "exclude": ["node_modules", "build", "dist", "**/*.test.ts"],
  "compilerOptions": {
    "incremental": true,
    "tsBuildInfoFile": "./node_modules/typescript/tsbuildinfo",
    "noEmit": true,
    "module": "ESNext",
    "strict": true,
    "lib": ["esnext", "dom", "dom.iterable"],
    "jsx": "preserve",
    "esModuleInterop": true,
    "skipLibCheck": true,
    "allowImportingTsExtensions": true,
    "moduleResolution": "bundler",
    "baseUrl": ".",
    "types": ["node", "vite/client"],
    "paths": {
      "@/*": ["./client/src/*"],
      "@shared/*": ["./shared/*"]
    }
  }
}


================================================================================
FILE: frontend/package-lock.json
================================================================================

{
  "name": "rest-express",
  "version": "1.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {}
}


================================================================================
FILE: frontend/package.json
================================================================================

{
  "name": "rest-express",
  "version": "1.0.0",
  "type": "module",
  "license": "MIT",
  "scripts": {
    "dev": "NODE_ENV=development tsx server/index.ts",
    "build": "vite build && esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist",
    "start": "NODE_ENV=production node dist/index.js",
    "check": "tsc",
    "db:push": "drizzle-kit push"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.10.0",
    "@jridgewell/trace-mapping": "^0.3.25",
    "@neondatabase/serverless": "^0.10.4",
    "@radix-ui/react-accordion": "^1.2.4",
    "@radix-ui/react-alert-dialog": "^1.1.7",
    "@radix-ui/react-aspect-ratio": "^1.1.3",
    "@radix-ui/react-avatar": "^1.1.4",
    "@radix-ui/react-checkbox": "^1.1.5",
    "@radix-ui/react-collapsible": "^1.1.4",
    "@radix-ui/react-context-menu": "^2.2.7",
    "@radix-ui/react-dialog": "^1.1.7",
    "@radix-ui/react-dropdown-menu": "^2.1.7",
    "@radix-ui/react-hover-card": "^1.1.7",
    "@radix-ui/react-label": "^2.1.3",
    "@radix-ui/react-menubar": "^1.1.7",
    "@radix-ui/react-navigation-menu": "^1.2.6",
    "@radix-ui/react-popover": "^1.1.7",
    "@radix-ui/react-progress": "^1.1.3",
    "@radix-ui/react-radio-group": "^1.2.4",
    "@radix-ui/react-scroll-area": "^1.2.4",
    "@radix-ui/react-select": "^2.1.7",
    "@radix-ui/react-separator": "^1.1.3",
    "@radix-ui/react-slider": "^1.2.4",
    "@radix-ui/react-slot": "^1.2.0",
    "@radix-ui/react-switch": "^1.1.4",
    "@radix-ui/react-tabs": "^1.1.4",
    "@radix-ui/react-toast": "^1.2.7",
    "@radix-ui/react-toggle": "^1.1.3",
    "@radix-ui/react-toggle-group": "^1.1.3",
    "@radix-ui/react-tooltip": "^1.2.0",
    "@tanstack/react-query": "^5.60.5",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.1.1",
    "connect-pg-simple": "^10.0.0",
    "date-fns": "^3.6.0",
    "drizzle-orm": "^0.39.1",
    "drizzle-zod": "^0.7.0",
    "embla-carousel-react": "^8.6.0",
    "express": "^4.21.2",
    "express-session": "^1.18.1",
    "framer-motion": "^11.13.1",
    "input-otp": "^1.4.2",
    "lucide-react": "^0.453.0",
    "memorystore": "^1.6.7",
    "next-themes": "^0.4.6",
    "passport": "^0.7.0",
    "passport-local": "^1.0.0",
    "react": "^18.3.1",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.55.0",
    "react-icons": "^5.4.0",
    "react-resizable-panels": "^2.1.7",
    "recharts": "^2.15.2",
    "tailwind-merge": "^2.6.0",
    "tailwindcss-animate": "^1.0.7",
    "tw-animate-css": "^1.2.5",
    "vaul": "^1.1.2",
    "wouter": "^3.3.5",
    "ws": "^8.18.0",
    "zod": "^3.24.2",
    "zod-validation-error": "^3.4.0"
  },
  "devDependencies": {
    "@replit/vite-plugin-cartographer": "^0.2.8",
    "@replit/vite-plugin-runtime-error-modal": "^0.0.3",
    "@tailwindcss/typography": "^0.5.15",
    "@tailwindcss/vite": "^4.1.3",
    "@types/connect-pg-simple": "^7.0.3",
    "@types/express": "4.17.21",
    "@types/express-session": "^1.18.0",
    "@types/node": "20.16.11",
    "@types/passport": "^1.0.16",
    "@types/passport-local": "^1.0.38",
    "@types/react": "^18.3.11",
    "@types/react-dom": "^18.3.1",
    "@types/ws": "^8.5.13",
    "@vitejs/plugin-react": "^4.3.2",
    "autoprefixer": "^10.4.20",
    "drizzle-kit": "^0.30.4",
    "esbuild": "^0.25.0",
    "postcss": "^8.4.47",
    "tailwindcss": "^3.4.17",
    "tsx": "^4.19.1",
    "typescript": "5.6.3",
    "vite": "^5.4.19"
  },
  "optionalDependencies": {
    "bufferutil": "^4.0.8"
  }
}


================================================================================
FILE: frontend/src/App.tsx
================================================================================

import { Switch, Route } from "wouter";
import { queryClient } from "./lib/queryClient";
import { QueryClientProvider } from "@tanstack/react-query";
import { Toaster } from "@/components/ui/toaster";
import { TooltipProvider } from "@/components/ui/tooltip";
import { ThemeProvider } from "@/components/theme-provider";
import Home from "@/pages/home";
import NotFound from "@/pages/not-found";

function Router() {
  return (
    <Switch>
      <Route path="/" component={Home} />
      <Route component={NotFound} />
    </Switch>
  );
}

function App() {
  return (
    <QueryClientProvider client={queryClient}>
      <ThemeProvider defaultTheme="system" storageKey="onlinesim-theme">
        <TooltipProvider>
          <Toaster />
          <Router />
        </TooltipProvider>
      </ThemeProvider>
    </QueryClientProvider>
  );
}

export default App;


================================================================================
FILE: frontend/src/index.css
================================================================================

@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');

@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: hsl(0, 0%, 100%);
  --foreground: hsl(0, 0%, 6.5%);
  --muted: hsl(0, 0%, 96%);
  --muted-foreground: hsl(0, 0%, 45%);
  --popover: hsl(0, 0%, 100%);
  --popover-foreground: hsl(0, 0%, 6.5%);
  --card: hsl(0, 0%, 100%);
  --card-foreground: hsl(0, 0%, 6.5%);
  --border: hsl(0, 0%, 89%);
  --input: hsl(0, 0%, 89%);
  --primary: hsl(194, 100%, 50%);
  --primary-foreground: hsl(0, 0%, 100%);
  --secondary: hsl(0, 0%, 96%);
  --secondary-foreground: hsl(0, 0%, 9%);
  --accent: hsl(0, 0%, 96%);
  --accent-foreground: hsl(0, 0%, 9%);
  --destructive: hsl(0, 84%, 60%);
  --destructive-foreground: hsl(0, 0%, 98%);
  --ring: hsl(194, 100%, 50%);
  --radius: 0.75rem;
  
  /* Professional cyber theme colors */
  --cyber-dark: hsl(215, 28%, 17%);
  --cyber-darker: hsl(215, 27%, 12%);
  --cyber-accent: hsl(174, 100%, 50%);
  --cyber-blue: hsl(194, 100%, 50%);
  --cyber-text: hsl(0, 0%, 88%);
  --cyber-border: hsl(215, 20%, 25%);
}

.dark {
  --background: hsl(215, 27%, 12%);
  --foreground: hsl(0, 0%, 88%);
  --muted: hsl(215, 20%, 18%);
  --muted-foreground: hsl(0, 0%, 63%);
  --popover: hsl(215, 27%, 12%);
  --popover-foreground: hsl(0, 0%, 88%);
  --card: hsl(215, 28%, 17%);
  --card-foreground: hsl(0, 0%, 88%);
  --border: hsl(215, 20%, 25%);
  --input: hsl(215, 20%, 18%);
  --primary: hsl(174, 100%, 50%);
  --primary-foreground: hsl(215, 27%, 12%);
  --secondary: hsl(215, 20%, 18%);
  --secondary-foreground: hsl(0, 0%, 88%);
  --accent: hsl(215, 20%, 18%);
  --accent-foreground: hsl(0, 0%, 88%);
  --destructive: hsl(0, 62%, 50%);
  --destructive-foreground: hsl(0, 0%, 88%);
  --ring: hsl(174, 100%, 50%);
  --radius: 0.75rem;
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply font-sans antialiased bg-background text-foreground;
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    font-feature-settings: 'cv02', 'cv03', 'cv04', 'cv11';
  }
}

@layer utilities {
  .cyber-accent {
    color: var(--cyber-accent);
  }
  
  .bg-cyber-accent {
    background-color: var(--cyber-accent);
  }
  
  .border-cyber-accent {
    border-color: var(--cyber-accent);
  }
  
  .text-cyber-accent {
    color: var(--cyber-accent);
  }
  
  .bg-cyber-dark {
    background-color: var(--cyber-dark);
  }
  
  .bg-cyber-darker {
    background-color: var(--cyber-darker);
  }
  
  .text-cyber-text {
    color: var(--cyber-text);
  }
  
  .border-cyber-border {
    border-color: var(--cyber-border);
  }
  
  .gradient-cyber {
    background: linear-gradient(135deg, var(--cyber-dark) 0%, var(--cyber-darker) 100%);
  }
  
  .shadow-cyber {
    box-shadow: 0 4px 20px rgba(0, 255, 198, 0.15);
  }
  
  .glow-cyber {
    box-shadow: 0 0 20px rgba(0, 255, 198, 0.3);
  }
  
  /* Professional micro-animations */
  .animate-fade-in {
    animation: fadeIn 0.3s ease-out;
  }
  
  .animate-fade-in-up {
    animation: fadeInUp 0.3s ease-out;
  }
  
  .animate-scale-in {
    animation: scaleIn 0.2s ease-out;
  }
  
  .hover-lift {
    transition: all 0.2s ease;
  }
  
  .hover-lift:hover {
    transform: translateY(-2px) scale(1.02);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  }
  
  .hover-glow {
    transition: all 0.2s ease;
  }
  
  .hover-glow:hover {
    box-shadow: 0 0 15px rgba(0, 255, 198, 0.4);
    transform: scale(1.02);
  }
  
  .card-hover {
    transition: all 0.2s ease;
  }
  
  .card-hover:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 20px rgba(0, 255, 198, 0.1);
    border-color: var(--primary);
  }
  
  /* Skeleton loading animation */
  .skeleton {
    background: linear-gradient(90deg, 
      var(--muted) 25%, 
      var(--muted-foreground) 50%, 
      var(--muted) 75%
    );
    background-size: 200% 100%;
    animation: loading 1.5s infinite;
  }
  
  /* Smooth button transitions */
  .btn-cyber {
    transition: all 0.2s ease;
    position: relative;
    overflow: hidden;
  }
  
  .btn-cyber:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 15px rgba(0, 255, 198, 0.3);
  }
  
  .btn-cyber:active {
    transform: translateY(0);
    transition: all 0.1s ease;
  }
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes scaleIn {
  from {
    opacity: 0;
    transform: scale(0.9);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

@keyframes loading {
  0% {
    background-position: 200% 0;
  }
  100% {
    background-position: -200% 0;
  }
}

/* Smooth scrolling */
html {
  scroll-behavior: smooth;
}


================================================================================
FILE: frontend/src/main.tsx
================================================================================

import { createRoot } from "react-dom/client";
import App from "./App";
import "./index.css";

createRoot(document.getElementById("root")!).render(<App />);


================================================================================
FILE: frontend/src/components/tab-navigation.tsx
================================================================================

import { cn } from "@/lib/utils";

interface Tab {
  id: string;
  label: string;
}

interface TabNavigationProps {
  tabs: Tab[];
  activeTab: string;
  onTabChange: (tabId: string) => void;
}

export function TabNavigation({ tabs, activeTab, onTabChange }: TabNavigationProps) {
  return (
    <nav className="border-b border-cyber-border bg-card">
      <div className="flex">
        {tabs.map((tab) => (
          <button
            key={tab.id}
            onClick={() => onTabChange(tab.id)}
            className={cn(
              "flex-1 py-3 text-center font-medium transition-all duration-200 hover-lift relative",
              activeTab === tab.id
                ? "text-primary border-b-2 border-primary bg-primary/5 shadow-sm"
                : "text-muted-foreground hover:text-foreground hover:bg-muted/50"
            )}
            data-testid={`tab-${tab.id}`}
          >
            {tab.label}
          </button>
        ))}
      </div>
    </nav>
  );
}


================================================================================
FILE: frontend/src/components/messages-tab.tsx
================================================================================

import { useQuery } from "@tanstack/react-query";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { useCopyToClipboard } from "@/lib/copy-utils";
import { useToast } from "@/hooks/use-toast";
import type { Message, Order, Service } from "@shared/schema";

interface MessageWithDetails extends Message {
  order?: Order;
  service?: Service;
}

export function MessagesTab() {
  const { copyToClipboard, extractCode } = useCopyToClipboard();
  const { toast } = useToast();

  const { data: messages, isLoading } = useQuery<Message[]>({
    queryKey: ["/api/messages"],
  });

  const { data: orders } = useQuery<Order[]>({
    queryKey: ["/api/orders"],
  });

  const { data: services } = useQuery<Service[]>({
    queryKey: ["/api/services"],
  });

  const messagesWithDetails: MessageWithDetails[] = messages?.map(message => {
    const order = orders?.find(o => o.id === message.orderId);
    const service = services?.find(s => s.id === order?.serviceId);
    return {
      ...message,
      order,
      service,
    };
  }) || [];

  const handleCopyCode = async (text: string) => {
    const code = extractCode(text);
    if (code) {
      const success = await copyToClipboard(code);
      if (success) {
        toast({
          title: "–ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!",
          description: `–ö–æ–¥ ${code} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞`,
        });
      } else {
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥",
          variant: "destructive",
        });
      }
    } else {
      toast({
        title: "–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω",
        description: "–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
        variant: "destructive",
      });
    }
  };

  const getServiceIcon = (serviceName?: string) => {
    switch (serviceName?.toLowerCase()) {
      case "telegram":
        return "üí¨";
      case "whatsapp":
        return "üì±";
      case "discord":
        return "üéÆ";
      default:
        return "üì±";
    }
  };

  const getServiceColor = (serviceName?: string) => {
    switch (serviceName?.toLowerCase()) {
      case "telegram":
        return "bg-blue-100 dark:bg-blue-900/20";
      case "whatsapp":
        return "bg-green-100 dark:bg-green-900/20";
      case "discord":
        return "bg-purple-100 dark:bg-purple-900/20";
      default:
        return "bg-gray-100 dark:bg-gray-900/20";
    }
  };

  const formatTimeAgo = (date: string) => {
    const now = new Date();
    const messageTime = new Date(date);
    const diffInMinutes = Math.floor((now.getTime() - messageTime.getTime()) / (1000 * 60));
    
    if (diffInMinutes < 1) return "–¢–æ–ª—å–∫–æ —á—Ç–æ";
    if (diffInMinutes < 60) return `${diffInMinutes} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    
    const diffInHours = Math.floor(diffInMinutes / 60);
    if (diffInHours < 24) return `${diffInHours}—á –Ω–∞–∑–∞–¥`;
    
    const diffInDays = Math.floor(diffInHours / 24);
    return `${diffInDays} –¥–Ω –Ω–∞–∑–∞–¥`;
  };

  if (isLoading) {
    return (
      <div className="p-4 space-y-3">
        {[...Array(2)].map((_, i) => (
          <Card key={i} className="animate-pulse">
            <CardContent className="p-4 space-y-3">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <div className="w-8 h-8 bg-gray-200 dark:bg-gray-700 rounded-full" />
                  <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-20" />
                </div>
                <div className="h-3 bg-gray-200 dark:bg-gray-700 rounded w-16" />
              </div>
              <div className="h-16 bg-gray-200 dark:bg-gray-700 rounded-lg" />
              <div className="flex items-center justify-between">
                <div className="h-3 bg-gray-200 dark:bg-gray-700 rounded w-24" />
                <div className="h-3 bg-gray-200 dark:bg-gray-700 rounded w-20" />
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    );
  }

  return (
    <div className="p-4 space-y-3">
      {messagesWithDetails.map((message) => (
        <Card key={message.id} data-testid={`card-message-${message.id}`}>
          <CardContent className="p-4 space-y-3">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <div className={`w-8 h-8 rounded-full ${getServiceColor(message.service?.name)} flex items-center justify-center text-sm`}>
                  {getServiceIcon(message.service?.name)}
                </div>
                <span className="font-medium" data-testid={`text-service-${message.id}`}>
                  {message.service?.name || "Unknown"}
                </span>
              </div>
              <span className="text-sm text-gray-500 dark:text-gray-400">
                {formatTimeAgo(message.receivedAt)}
              </span>
            </div>
            
            <div className="bg-gray-50 dark:bg-background rounded-lg p-3">
              <p className="text-sm font-mono" data-testid={`text-message-${message.id}`}>
                {message.text}
              </p>
            </div>
            
            <div className="flex items-center justify-between text-sm text-gray-500 dark:text-gray-400">
              <span data-testid={`text-phone-${message.id}`}>
                {message.order?.phoneNumber}
              </span>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => handleCopyCode(message.text)}
                className="text-telegram-blue hover:text-telegram-blue/80"
                data-testid={`button-copy-code-${message.id}`}
              >
                –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
              </Button>
            </div>
          </CardContent>
        </Card>
      ))}
      
      {messagesWithDetails.length === 0 && (
        <div className="text-center py-8 text-gray-500 dark:text-gray-400">
          –°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç
        </div>
      )}
    </div>
  );
}


================================================================================
FILE: frontend/src/components/action-buttons.tsx
================================================================================

import { Button } from "@/components/ui/button";
import { BookOpen, Users, MessageCircle, ExternalLink } from "lucide-react";

interface ActionButtonsProps {
  onOpenInstructions: () => void;
  onOpenFAQ: () => void;
}

export function ActionButtons({ onOpenInstructions, onOpenFAQ }: ActionButtonsProps) {
  const handleTelegramAccountsClick = () => {
    window.open("https://t.me/telegram_accounts_bot", "_blank");
  };

  const handleSupportClick = () => {
    window.open("https://t.me/support", "_blank");
  };

  const handleChannelClick = () => {
    window.open("https://t.me/onlinesim_channel", "_blank");
  };

  return (
    <div className="p-4 pb-2 space-y-3 animate-fade-in">
      {/* Main Action Buttons */}
      <div className="grid grid-cols-2 gap-3">
        <Button
          onClick={onOpenInstructions}
          className="btn-cyber hover-glow bg-primary/10 border border-primary/20 text-primary hover:bg-primary/20 h-auto py-3 flex-col gap-1"
          data-testid="button-instructions"
        >
          <BookOpen className="h-5 w-5" />
          <span className="text-xs">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</span>
        </Button>
        
        <Button
          onClick={handleTelegramAccountsClick}
          className="btn-cyber hover-glow bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 text-blue-600 dark:text-blue-400 hover:bg-blue-100 dark:hover:bg-blue-900/30 h-auto py-3 flex-col gap-1"
          data-testid="button-telegram-accounts"
        >
          <Users className="h-5 w-5" />
          <span className="text-xs">–ê–∫–∫–∞—É–Ω—Ç—ã –¢–ì</span>
        </Button>
      </div>

      {/* Support & Info Buttons */}
      <div className="grid grid-cols-2 gap-3">
        <Button
          onClick={handleSupportClick}
          className="btn-cyber hover-glow bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 text-green-600 dark:text-green-400 hover:bg-green-100 dark:hover:bg-green-900/30 h-auto py-3 flex-col gap-1"
          data-testid="button-support"
        >
          <MessageCircle className="h-5 w-5" />
          <span className="text-xs">–ü–æ–¥–¥–µ—Ä–∂–∫–∞</span>
        </Button>
        
        <Button
          onClick={handleChannelClick}
          className="btn-cyber hover-glow bg-purple-50 dark:bg-purple-900/20 border border-purple-200 dark:border-purple-800 text-purple-600 dark:text-purple-400 hover:bg-purple-100 dark:hover:bg-purple-900/30 h-auto py-3 flex-col gap-1"
          data-testid="button-channel"
        >
          <ExternalLink className="h-5 w-5" />
          <span className="text-xs">–ö–∞–Ω–∞–ª –¢–ì</span>
        </Button>
      </div>
    </div>
  );
}

================================================================================
FILE: frontend/src/components/bottom-navigation.tsx
================================================================================

import { Home, Phone, History, User, HelpCircle } from "lucide-react";
import { cn } from "@/lib/utils";

interface BottomNavigationProps {
  activeTab: string;
  onTabChange: (tab: string) => void;
}

export function BottomNavigation({ activeTab, onTabChange }: BottomNavigationProps) {
  const navItems = [
    { id: "home", label: "–ì–ª–∞–≤–Ω–∞—è", icon: Home },
    { id: "numbers", label: "–ù–æ–º–µ—Ä–∞", icon: Phone },
    { id: "history", label: "–ò—Å—Ç–æ—Ä–∏—è", icon: History },
    { id: "faq", label: "FAQ", icon: HelpCircle },
    { id: "profile", label: "–ü—Ä–æ—Ñ–∏–ª—å", icon: User },
  ];

  return (
    <nav className="fixed bottom-0 left-0 right-0 bg-card/95 backdrop-blur-sm border-t border-cyber-border shadow-cyber z-30">
      <div className="grid grid-cols-5 h-16">
        {navItems.map((item) => {
          const Icon = item.icon;
          const isActive = activeTab === item.id;
          
          return (
            <button
              key={item.id}
              onClick={() => onTabChange(item.id)}
              className={cn(
                "flex flex-col items-center justify-center transition-all duration-200 relative hover-lift",
                isActive 
                  ? "text-primary" 
                  : "text-muted-foreground hover:text-foreground"
              )}
              data-testid={`nav-${item.id}`}
            >
              {isActive && (
                <div className="absolute top-0 left-1/2 transform -translate-x-1/2 w-8 h-0.5 bg-primary rounded-full" />
              )}
              <Icon className="h-5 w-5" />
              <span className="text-xs mt-1">{item.label}</span>
            </button>
          );
        })}
      </div>
    </nav>
  );
}


================================================================================
FILE: frontend/src/components/countries-tab.tsx
================================================================================

import { useQuery } from "@tanstack/react-query";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import type { Country } from "@shared/schema";

interface CountriesTabProps {
  searchQuery: string;
  onCountrySelect: (country: Country) => void;
}

export function CountriesTab({ searchQuery, onCountrySelect }: CountriesTabProps) {
  const { data: countries, isLoading } = useQuery<Country[]>({
    queryKey: ["/api/countries"],
  });

  const filteredCountries = countries?.filter(country =>
    country.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
    country.code.toLowerCase().includes(searchQuery.toLowerCase())
  ) || [];

  const getStatusBadge = (status: string, numbersCount: number) => {
    switch (status) {
      case "available":
        return (
          <Badge variant="secondary" className="bg-green-100 dark:bg-green-900/20 text-green-700 dark:text-green-300">
            –î–æ—Å—Ç—É–ø–Ω–æ
          </Badge>
        );
      case "low":
        return (
          <Badge variant="secondary" className="bg-yellow-100 dark:bg-yellow-900/20 text-yellow-700 dark:text-yellow-300">
            –ú–∞–ª–æ –Ω–æ–º–µ—Ä–æ–≤
          </Badge>
        );
      case "unavailable":
        return (
          <Badge variant="secondary" className="bg-red-100 dark:bg-red-900/20 text-red-700 dark:text-red-300">
            –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ
          </Badge>
        );
      default:
        return null;
    }
  };

  if (isLoading) {
    return (
      <div className="p-4 space-y-3">
        {[...Array(4)].map((_, i) => (
          <Card key={i} className="animate-pulse">
            <CardContent className="p-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <div className="w-8 h-8 bg-gray-200 dark:bg-gray-700 rounded-full" />
                  <div className="space-y-2">
                    <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-20" />
                    <div className="h-3 bg-gray-200 dark:bg-gray-700 rounded w-16" />
                  </div>
                </div>
                <div className="space-y-2">
                  <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-16" />
                  <div className="h-3 bg-gray-200 dark:bg-gray-700 rounded w-20" />
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    );
  }

  return (
    <div className="p-4 space-y-3">
      {filteredCountries.map((country) => (
        <Card
          key={country.id}
          className={cn(
            "card-hover cursor-pointer animate-fade-in-up",
            !country.available && "opacity-50 cursor-not-allowed"
          )}
          onClick={() => country.available && onCountrySelect(country)}
          data-testid={`card-country-${country.id}`}
        >
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="w-8 h-8 rounded-full bg-gradient-to-br from-blue-400 to-blue-600 flex items-center justify-center text-white font-semibold text-sm">
                  {country.flag}
                </div>
                <div>
                  <h3 className="font-medium" data-testid={`text-country-name-${country.id}`}>
                    {country.name}
                  </h3>
                  <p className="text-sm text-gray-500 dark:text-gray-400">
                    –æ—Ç ‚ÇΩ{country.priceFrom}
                  </p>
                </div>
              </div>
              <div className="text-right">
                {getStatusBadge(country.status, country.numbersCount)}
                <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                  {country.numbersCount} {country.numbersCount === 1 ? '–Ω–æ–º–µ—Ä' : '–Ω–æ–º–µ—Ä–æ–≤'}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      ))}
      {filteredCountries.length === 0 && (
        <div className="text-center py-8 text-gray-500 dark:text-gray-400">
          –°—Ç—Ä–∞–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        </div>
      )}
    </div>
  );
}

function cn(...classes: (string | undefined)[]) {
  return classes.filter(Boolean).join(" ");
}


================================================================================
FILE: frontend/src/components/faq-tab.tsx
================================================================================

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { ExternalLink, MessageCircle, Users, BookOpen } from "lucide-react";

interface FAQItem {
  question: string;
  answer: string;
}

const faqData: FAQItem[] = [
  {
    question: "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞?",
    answer: "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –∏ —Å–µ—Ä–≤–∏—Å, –ø–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–∫—É–ø–∫–∏. –ù–æ–º–µ—Ä –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–µ–ª–µ–Ω –¥–ª—è –≤–∞—Å –Ω–∞ 15 –º–∏–Ω—É—Ç."
  },
  {
    question: "–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–µ–π—Å—Ç–≤—É–µ—Ç –Ω–æ–º–µ—Ä?",
    answer: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –Ω–æ–º–µ—Ä–∞ - 15 –º–∏–Ω—É—Ç. –ï—Å–ª–∏ SMS –Ω–µ –ø—Ä–∏–¥–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –¥–µ–Ω—å–≥–∏ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã."
  },
  {
    question: "–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ SMS –Ω–µ –ø—Ä–∏—à–ª–æ?",
    answer: "–ï—Å–ª–∏ SMS –Ω–µ –ø—Ä–∏—à–ª–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç, –¥–µ–Ω—å–≥–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –Ω–∞ –±–∞–ª–∞–Ω—Å. –ú–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä."
  },
  {
    question: "–ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å?",
    answer: "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫—É '–ü—Ä–æ—Ñ–∏–ª—å' –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'. –î–æ—Å—Ç—É–ø–Ω—ã —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã."
  },
  {
    question: "–ú–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–∏–Ω –Ω–æ–º–µ—Ä –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤?",
    answer: "–ù–µ—Ç, –∫–∞–∂–¥—ã–π –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞. –î–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω—É–∂–Ω–æ –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞."
  },
  {
    question: "–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à —Å–µ—Ä–≤–∏—Å?",
    answer: "–î–∞, –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è SMS-–∫–æ–¥–æ–≤. –ú—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."
  }
];

export function FAQTab() {
  const handleSupportClick = () => {
    window.open("https://t.me/support", "_blank");
  };

  const handleChannelClick = () => {
    window.open("https://t.me/onlinesim_channel", "_blank");
  };

  return (
    <div className="p-4 space-y-4 animate-fade-in">
      {/* Support Links */}
      <div className="grid grid-cols-2 gap-3 mb-6">
        <Button
          onClick={handleSupportClick}
          className="btn-cyber hover-glow bg-primary/10 border border-primary/20 text-primary hover:bg-primary/20"
          data-testid="button-support"
        >
          <MessageCircle className="h-4 w-4 mr-2" />
          –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞
        </Button>
        
        <Button
          onClick={handleChannelClick}
          className="btn-cyber hover-glow bg-primary/10 border border-primary/20 text-primary hover:bg-primary/20"
          data-testid="button-channel"
        >
          <Users className="h-4 w-4 mr-2" />
          –ö–∞–Ω–∞–ª Telegram
        </Button>
      </div>

      {/* FAQ Section */}
      <Card className="card-hover animate-fade-in-up">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <BookOpen className="h-5 w-5 text-primary" />
            –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {faqData.map((faq, index) => (
            <div 
              key={index} 
              className="border-b border-border pb-4 last:border-b-0 last:pb-0 animate-fade-in-up"
              style={{ animationDelay: `${index * 0.1}s` }}
            >
              <h3 
                className="font-medium text-foreground mb-2" 
                data-testid={`faq-question-${index}`}
              >
                {faq.question}
              </h3>
              <p 
                className="text-sm text-muted-foreground leading-relaxed" 
                data-testid={`faq-answer-${index}`}
              >
                {faq.answer}
              </p>
            </div>
          ))}
        </CardContent>
      </Card>

      {/* Additional Info */}
      <Card className="card-hover animate-fade-in-up bg-primary/5 border-primary/20">
        <CardContent className="p-4">
          <div className="flex items-start gap-3">
            <MessageCircle className="h-5 w-5 text-primary mt-0.5" />
            <div>
              <h4 className="font-medium text-primary mb-1">–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</h4>
              <p className="text-sm text-muted-foreground mb-3">
                –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.
              </p>
              <Button 
                onClick={handleSupportClick}
                size="sm"
                className="bg-primary hover:bg-primary/90 btn-cyber"
                data-testid="button-contact-support"
              >
                <ExternalLink className="h-3 w-3 mr-1" />
                –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

================================================================================
FILE: frontend/src/components/profile-tab.tsx
================================================================================

import { useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Wallet, Gift, Users, CreditCard, Copy, Settings } from "lucide-react";
import { useTelegram } from "@/lib/telegram";
import { useCopyToClipboard } from "@/lib/copy-utils";
import { useToast } from "@/hooks/use-toast";
import type { User } from "@shared/schema";

interface ProfileTabProps {
  onOpenAdmin?: () => void;
}

export function ProfileTab({ onOpenAdmin }: ProfileTabProps = {}) {
  const [promoCode, setPromoCode] = useState("");
  const [refLink] = useState("https://t.me/onlinesim_bot?start=ref123456");
  const { user: telegramUser } = useTelegram();
  const { copyToClipboard } = useCopyToClipboard();
  const { toast } = useToast();

  const { data: user } = useQuery<User>({
    queryKey: ["/api/users", telegramUser?.id?.toString() || "sample_user"],
    enabled: !!telegramUser?.id || true,
  });

  const formatBalance = (balance: number) => {
    return `‚ÇΩ${(balance / 100).toFixed(2)}`;
  };

  const handleCopyRefLink = async () => {
    const success = await copyToClipboard(refLink);
    if (success) {
      toast({
        title: "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!",
        description: "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞",
      });
    } else {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É",
        variant: "destructive",
      });
    }
  };

  const handleTopUp = () => {
    toast({
      title: "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞",
      description: "–§—É–Ω–∫—Ü–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ",
    });
  };

  const handleActivatePromo = () => {
    if (!promoCode.trim()) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥",
        variant: "destructive",
      });
      return;
    }

    toast({
      title: "–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
      description: `–ü—Ä–æ–º–æ–∫–æ–¥ ${promoCode} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!`,
    });
    setPromoCode("");
  };

  return (
    <div className="p-4 space-y-4">
      {/* User Info */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Wallet className="h-5 w-5" />
            –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center justify-between">
            <span className="text-sm text-gray-500 dark:text-gray-400">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</span>
            <span className="font-medium" data-testid="text-username">
              {user?.username || telegramUser?.username || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}
            </span>
          </div>
          <div className="flex items-center justify-between">
            <span className="text-sm text-gray-500 dark:text-gray-400">–ë–∞–ª–∞–Ω—Å:</span>
            <span className="text-xl font-bold text-green-600 dark:text-green-400" data-testid="text-user-balance">
              {user ? formatBalance(user.balance) : "‚ÇΩ0.00"}
            </span>
          </div>
          <Button 
            onClick={handleTopUp}
            className="w-full bg-primary hover:bg-primary/90 shadow-cyber btn-cyber hover-glow"
            data-testid="button-top-up"
          >
            <CreditCard className="h-4 w-4 mr-2" />
            –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å
          </Button>
        </CardContent>
      </Card>

      {/* Promo Code */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Gift className="h-5 w-5" />
            –ü—Ä–æ–º–æ–∫–æ–¥
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex gap-2">
            <Input
              placeholder="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥"
              value={promoCode}
              onChange={(e) => setPromoCode(e.target.value)}
              data-testid="input-promo-code"
            />
            <Button 
              onClick={handleActivatePromo}
              variant="outline"
              data-testid="button-activate-promo"
            >
              –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å
            </Button>
          </div>
          <p className="text-sm text-gray-500 dark:text-gray-400">
            –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤
          </p>
        </CardContent>
      </Card>

      {/* Referral Program */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Users className="h-5 w-5" />
            –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="bg-primary/5 border border-primary/20 p-3 rounded-lg">
            <h4 className="font-medium text-primary mb-2">–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π!</h4>
            <p className="text-sm text-muted-foreground">
              –ü–æ–ª—É—á–∞–π—Ç–µ 10% —Å –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            </p>
          </div>
          
          <div className="space-y-2">
            <label className="text-sm font-medium">–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</label>
            <div className="flex gap-2">
              <Input
                value={refLink}
                readOnly
                className="bg-gray-50 dark:bg-secondary"
                data-testid="input-ref-link"
              />
              <Button
                variant="outline"
                size="icon"
                onClick={handleCopyRefLink}
                data-testid="button-copy-ref-link"
              >
                <Copy className="h-4 w-4" />
              </Button>
            </div>
          </div>

          <div className="grid grid-cols-2 gap-4 pt-2">
            <div className="text-center">
              <div className="text-2xl font-bold text-primary">0</div>
              <div className="text-sm text-muted-foreground">–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-primary">‚ÇΩ0.00</div>
              <div className="text-sm text-muted-foreground">–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ</div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Admin Panel Access */}
      {user?.isAdmin && onOpenAdmin && (
        <Card className="border-primary/20 bg-primary/5">
          <CardContent className="p-4">
            <Button
              onClick={onOpenAdmin}
              className="w-full bg-primary hover:bg-primary/90 btn-cyber hover-glow"
              data-testid="button-open-admin"
            >
              <Settings className="h-4 w-4 mr-2" />
              –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å
            </Button>
          </CardContent>
        </Card>
      )}

      {/* Statistics */}
      <Card>
        <CardHeader>
          <CardTitle>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 gap-4">
            <div className="text-center p-3 bg-gray-50 dark:bg-secondary rounded-lg">
              <div className="text-xl font-bold">2</div>
              <div className="text-sm text-gray-500 dark:text-gray-400">–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤</div>
            </div>
            <div className="text-center p-3 bg-gray-50 dark:bg-secondary rounded-lg">
              <div className="text-xl font-bold">‚ÇΩ33</div>
              <div className="text-sm text-gray-500 dark:text-gray-400">–ü–æ—Ç—Ä–∞—á–µ–Ω–æ</div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

================================================================================
FILE: frontend/src/components/admin-tab.tsx
================================================================================

import { useState } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Settings, BarChart3, DollarSign, Users, TrendingUp, Save, AlertCircle } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { queryClient, apiRequest } from "@/lib/queryClient";
import type { Setting, Statistic } from "@shared/schema";

export function AdminTab() {
  const { toast } = useToast();
  const [settingsChanges, setSettingsChanges] = useState<Record<string, string>>({});

  // Fetch settings
  const { data: settings, isLoading: settingsLoading } = useQuery<Setting[]>({
    queryKey: ["/api/settings"],
  });

  // Fetch statistics
  const { data: statistics, isLoading: statsLoading } = useQuery<Statistic[]>({
    queryKey: ["/api/statistics"],
  });

  // Update setting mutation
  const updateSettingMutation = useMutation({
    mutationFn: async ({ key, value }: { key: string; value: string }) => {
      return apiRequest(`/api/settings/${key}`, {
        method: "PUT",
        body: { value },
      });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/settings"] });
      toast({
        title: "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
        description: "–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
      });
      setSettingsChanges({});
    },
    onError: () => {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É",
        variant: "destructive",
      });
    },
  });

  const handleSettingChange = (key: string, value: string) => {
    setSettingsChanges(prev => ({
      ...prev,
      [key]: value
    }));
  };

  const handleSaveSetting = (key: string) => {
    const value = settingsChanges[key];
    if (value !== undefined) {
      updateSettingMutation.mutate({ key, value });
    }
  };

  const formatBalance = (balance: number) => {
    return `‚ÇΩ${(balance / 100).toFixed(2)}`;
  };

  const getSettingValue = (key: string, originalValue: string) => {
    return settingsChanges[key] !== undefined ? settingsChanges[key] : originalValue;
  };

  if (settingsLoading || statsLoading) {
    return (
      <div className="p-4 space-y-4">
        {[...Array(3)].map((_, i) => (
          <Card key={i} className="skeleton animate-pulse">
            <CardContent className="p-4">
              <div className="h-20 bg-muted rounded" />
            </CardContent>
          </Card>
        ))}
      </div>
    );
  }

  return (
    <div className="p-4 animate-fade-in">
      <Tabs defaultValue="stats" className="space-y-4">
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="stats" className="flex items-center gap-2">
            <BarChart3 className="h-4 w-4" />
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
          </TabsTrigger>
          <TabsTrigger value="settings" className="flex items-center gap-2">
            <Settings className="h-4 w-4" />
            –ù–∞—Å—Ç—Ä–æ–π–∫–∏
          </TabsTrigger>
        </TabsList>

        <TabsContent value="stats" className="space-y-4">
          {/* Statistics Overview */}
          {statistics && statistics.length > 0 && (
            <>
              <div className="grid grid-cols-2 gap-4">
                <Card className="card-hover animate-fade-in-up">
                  <CardContent className="p-4">
                    <div className="flex items-center gap-3">
                      <div className="w-10 h-10 rounded-full bg-green-100 dark:bg-green-900/20 flex items-center justify-center">
                        <DollarSign className="h-5 w-5 text-green-600 dark:text-green-400" />
                      </div>
                      <div>
                        <p className="text-sm text-muted-foreground">–î–æ—Ö–æ–¥ —Å–µ–≥–æ–¥–Ω—è</p>
                        <p className="text-lg font-bold text-green-600 dark:text-green-400">
                          {formatBalance(statistics[0]?.totalRevenue || 0)}
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                <Card className="card-hover animate-fade-in-up">
                  <CardContent className="p-4">
                    <div className="flex items-center gap-3">
                      <div className="w-10 h-10 rounded-full bg-blue-100 dark:bg-blue-900/20 flex items-center justify-center">
                        <TrendingUp className="h-5 w-5 text-blue-600 dark:text-blue-400" />
                      </div>
                      <div>
                        <p className="text-sm text-muted-foreground">–ó–∞–∫–∞–∑—ã —Å–µ–≥–æ–¥–Ω—è</p>
                        <p className="text-lg font-bold text-blue-600 dark:text-blue-400">
                          {statistics[0]?.totalOrders || 0}
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <Card className="card-hover animate-fade-in-up">
                  <CardContent className="p-4">
                    <div className="flex items-center gap-3">
                      <div className="w-10 h-10 rounded-full bg-purple-100 dark:bg-purple-900/20 flex items-center justify-center">
                        <Users className="h-5 w-5 text-purple-600 dark:text-purple-400" />
                      </div>
                      <div>
                        <p className="text-sm text-muted-foreground">–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</p>
                        <p className="text-lg font-bold text-purple-600 dark:text-purple-400">
                          {statistics[0]?.newUsers || 0}
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                <Card className="card-hover animate-fade-in-up">
                  <CardContent className="p-4">
                    <div className="flex items-center gap-3">
                      <div className="w-10 h-10 rounded-full bg-orange-100 dark:bg-orange-900/20 flex items-center justify-center">
                        <Users className="h-5 w-5 text-orange-600 dark:text-orange-400" />
                      </div>
                      <div>
                        <p className="text-sm text-muted-foreground">–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</p>
                        <p className="text-lg font-bold text-orange-600 dark:text-orange-400">
                          {statistics[0]?.activeUsers || 0}
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>

              {/* Recent Statistics */}
              <Card className="card-hover animate-fade-in-up">
                <CardHeader>
                  <CardTitle className="text-lg">–ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    {statistics.slice(0, 7).map((stat, index) => (
                      <div key={stat.id} className="flex items-center justify-between py-2 border-b border-border last:border-b-0">
                        <div className="text-sm font-medium">{stat.date}</div>
                        <div className="flex items-center gap-4 text-sm text-muted-foreground">
                          <span>{stat.totalOrders} –∑–∞–∫–∞–∑–æ–≤</span>
                          <span className="text-green-600 dark:text-green-400">
                            {formatBalance(stat.totalRevenue)}
                          </span>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </>
          )}
        </TabsContent>

        <TabsContent value="settings" className="space-y-4">
          {/* Settings */}
          {settings && (
            <Card className="card-hover animate-fade-in-up">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Settings className="h-5 w-5 text-primary" />
                  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                {settings.map((setting) => (
                  <div key={setting.key} className="space-y-2">
                    <Label htmlFor={setting.key}>
                      {setting.description || setting.key}
                    </Label>
                    <div className="flex gap-2">
                      <Input
                        id={setting.key}
                        value={getSettingValue(setting.key, setting.value)}
                        onChange={(e) => handleSettingChange(setting.key, e.target.value)}
                        className="flex-1"
                        data-testid={`input-setting-${setting.key}`}
                      />
                      <Button
                        onClick={() => handleSaveSetting(setting.key)}
                        disabled={
                          settingsChanges[setting.key] === undefined || 
                          updateSettingMutation.isPending
                        }
                        size="sm"
                        className="bg-primary hover:bg-primary/90 btn-cyber"
                        data-testid={`button-save-${setting.key}`}
                      >
                        <Save className="h-4 w-4" />
                      </Button>
                    </div>
                    {setting.key === "commission_percent" && (
                      <p className="text-xs text-muted-foreground">
                        –ö–æ–º–∏—Å—Å–∏—è –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5 –¥–ª—è 5%)
                      </p>
                    )}
                  </div>
                ))}
              </CardContent>
            </Card>
          )}

          {/* Admin Warning */}
          <Card className="bg-amber-50 dark:bg-amber-900/10 border-amber-200 dark:border-amber-800">
            <CardContent className="p-4">
              <div className="flex items-start gap-3">
                <AlertCircle className="h-5 w-5 text-amber-600 dark:text-amber-400 mt-0.5" />
                <div>
                  <h4 className="font-medium text-amber-800 dark:text-amber-200 mb-1">
                    –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å
                  </h4>
                  <p className="text-sm text-amber-700 dark:text-amber-300">
                    –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ 
                    –∏ –º–æ–≥—É—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç—É –≤—Å–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}

================================================================================
FILE: frontend/src/components/search-bar.tsx
================================================================================

import { Search } from "lucide-react";
import { Input } from "@/components/ui/input";

interface SearchBarProps {
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
}

export function SearchBar({ value, onChange, placeholder = "–ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω –∏–ª–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..." }: SearchBarProps) {
  return (
    <div className="p-4 bg-muted/30">
      <div className="relative">
        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
        <Input
          type="text"
          placeholder={placeholder}
          value={value}
          onChange={(e) => onChange(e.target.value)}
          className="pl-10 bg-background border-border focus:ring-2 focus:ring-primary"
          data-testid="input-search"
        />
      </div>
    </div>
  );
}


================================================================================
FILE: frontend/src/components/instructions-modal.tsx
================================================================================

import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Phone, Clock, CreditCard, MessageSquare, CheckCircle, HelpCircle } from "lucide-react";

interface InstructionsModalProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onOpenFAQ?: () => void;
}

export function InstructionsModal({ open, onOpenChange, onOpenFAQ }: InstructionsModalProps) {
  const steps = [
    {
      icon: CreditCard,
      title: "–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å",
      description: "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–æ–º–µ—Ä–∞"
    },
    {
      icon: Phone,
      title: "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –∏ —Å–µ—Ä–≤–∏—Å",
      description: "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω—É –∏ —Å–µ—Ä–≤–∏—Å, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
    },
    {
      icon: MessageSquare,
      title: "–ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–º–µ—Ä",
      description: "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
    },
    {
      icon: Clock,
      title: "–î–æ–∂–¥–∏—Ç–µ—Å—å SMS",
      description: "–£ –≤–∞—Å –µ—Å—Ç—å 15 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å SMS —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
    },
    {
      icon: CheckCircle,
      title: "–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
      description: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–µ—Ä–≤–∏—Å–µ"
    }
  ];

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-md animate-scale-in">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Phone className="h-5 w-5 text-primary" />
            –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä–∞
          </DialogTitle>
        </DialogHeader>
        
        <div className="space-y-4">
          {steps.map((step, index) => {
            const Icon = step.icon;
            return (
              <Card 
                key={index} 
                className="card-hover animate-fade-in-up"
                style={{ animationDelay: `${index * 0.1}s` }}
              >
                <CardContent className="p-3">
                  <div className="flex items-start gap-3">
                    <div className="w-8 h-8 rounded-full bg-primary/10 border border-primary/20 flex items-center justify-center mt-0.5">
                      <Icon className="h-4 w-4 text-primary" />
                    </div>
                    <div className="flex-1">
                      <h4 className="font-medium text-foreground mb-1">
                        {index + 1}. {step.title}
                      </h4>
                      <p className="text-sm text-muted-foreground">
                        {step.description}
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            );
          })}
        </div>

        <div className="flex gap-2 pt-4">
          <Button
            onClick={() => onOpenChange(false)}
            variant="outline"
            className="flex-1"
            data-testid="button-close-instructions"
          >
            –ü–æ–Ω—è—Ç–Ω–æ
          </Button>
          {onOpenFAQ && (
            <Button
              onClick={() => {
                onOpenChange(false);
                onOpenFAQ();
              }}
              className="flex-1 bg-primary hover:bg-primary/90 btn-cyber"
              data-testid="button-open-faq"
            >
              <HelpCircle className="h-4 w-4 mr-2" />
              FAQ
            </Button>
          )}
        </div>

        <Card className="bg-primary/5 border-primary/20 mt-4">
          <CardContent className="p-3">
            <div className="flex items-center gap-2 mb-2">
              <Clock className="h-4 w-4 text-primary" />
              <span className="font-medium text-primary text-sm">–í–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å</span>
            </div>
            <p className="text-xs text-muted-foreground">
              –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –Ω–æ–º–µ—Ä–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 15 –º–∏–Ω—É—Ç. –ï—Å–ª–∏ SMS –Ω–µ –ø—Ä–∏–¥–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, 
              –¥–µ–Ω—å–≥–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Ä–Ω—É—Ç—Å—è –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.
            </p>
          </CardContent>
        </Card>
      </DialogContent>
    </Dialog>
  );
}

================================================================================
FILE: frontend/src/components/select-tab.tsx
================================================================================

import { useState } from "react";
import { Plus } from "lucide-react";
import { Button } from "@/components/ui/button";
import { SearchBar } from "@/components/search-bar";
import { TabNavigation } from "@/components/tab-navigation";
import { CountriesTab } from "@/components/countries-tab";
import { ServicesTab } from "@/components/services-tab";
import { PurchaseModal } from "@/components/purchase-modal";
import { ActionButtons } from "@/components/action-buttons";
import { InstructionsModal } from "@/components/instructions-modal";
import type { Country, Service } from "@shared/schema";

const tabs = [
  { id: "countries", label: "–°—Ç—Ä–∞–Ω—ã" },
  { id: "services", label: "–°–µ—Ä–≤–∏—Å—ã" },
];

interface SelectTabProps {
  onPurchaseSuccess?: () => void;
  onOpenFAQ?: () => void;
}

export function SelectTab({ onPurchaseSuccess, onOpenFAQ }: SelectTabProps) {
  const [activeTab, setActiveTab] = useState("countries");
  const [searchQuery, setSearchQuery] = useState("");
  const [isPurchaseModalOpen, setIsPurchaseModalOpen] = useState(false);
  const [isInstructionsModalOpen, setIsInstructionsModalOpen] = useState(false);

  const handleCountrySelect = (country: Country) => {
    console.log("Selected country:", country);
    setIsPurchaseModalOpen(true);
  };

  const handleServiceSelect = (service: Service) => {
    console.log("Selected service:", service);
    setIsPurchaseModalOpen(true);
  };

  const handlePurchaseModalClose = (open: boolean, success?: boolean) => {
    setIsPurchaseModalOpen(open);
    if (success && onPurchaseSuccess) {
      onPurchaseSuccess();
    }
  };

  const renderTabContent = () => {
    switch (activeTab) {
      case "countries":
        return (
          <CountriesTab 
            searchQuery={searchQuery} 
            onCountrySelect={handleCountrySelect}
          />
        );
      case "services":
        return (
          <ServicesTab 
            searchQuery={searchQuery} 
            onServiceSelect={handleServiceSelect}
          />
        );
      default:
        return null;
    }
  };

  return (
    <div className="flex flex-col h-full animate-fade-in">
      {/* Action Buttons */}
      <ActionButtons 
        onOpenInstructions={() => setIsInstructionsModalOpen(true)}
        onOpenFAQ={() => onOpenFAQ?.()}
      />
      
      <SearchBar 
        value={searchQuery}
        onChange={setSearchQuery}
        placeholder="–ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω –∏–ª–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
      />
      
      <TabNavigation 
        tabs={tabs}
        activeTab={activeTab}
        onTabChange={setActiveTab}
      />
      
      <div className="flex-1 relative">
        <div className="animate-fade-in-up">
          {renderTabContent()}
        </div>
        
        {/* Floating Action Button */}
        <div className="fixed bottom-20 right-4 z-40">
          <Button
            size="icon"
            onClick={() => setIsPurchaseModalOpen(true)}
            className="w-14 h-14 bg-primary hover:bg-primary/90 text-primary-foreground rounded-full shadow-cyber btn-cyber hover-glow animate-scale-in"
            data-testid="button-purchase-fab"
          >
            <Plus className="h-6 w-6" />
          </Button>
        </div>
      </div>
      
      <PurchaseModal 
        open={isPurchaseModalOpen}
        onOpenChange={handlePurchaseModalClose}
      />

      <InstructionsModal
        open={isInstructionsModalOpen}
        onOpenChange={setIsInstructionsModalOpen}
        onOpenFAQ={() => {
          setIsInstructionsModalOpen(false);
          onOpenFAQ?.();
        }}
      />
    </div>
  );
}

================================================================================
FILE: frontend/src/components/purchase-modal.tsx
================================================================================

import { useState } from "react";
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Card, CardContent } from "@/components/ui/card";
import { useToast } from "@/hooks/use-toast";
import { useTelegram } from "@/lib/telegram";
import { apiRequest } from "@/lib/queryClient";
import type { Country, Service, Order } from "@shared/schema";

interface PurchaseModalProps {
  open: boolean;
  onOpenChange: (open: boolean, success?: boolean) => void;
}

export function PurchaseModal({ open, onOpenChange }: PurchaseModalProps) {
  const [selectedCountryId, setSelectedCountryId] = useState<string>("");
  const [selectedServiceId, setSelectedServiceId] = useState<string>("");
  const { toast } = useToast();
  const { user: telegramUser } = useTelegram();
  const queryClient = useQueryClient();

  const { data: countries } = useQuery<Country[]>({
    queryKey: ["/api/countries"],
  });

  const { data: services } = useQuery<Service[]>({
    queryKey: ["/api/services"],
  });

  const selectedCountry = countries?.find(c => c.id === selectedCountryId);
  const selectedService = services?.find(s => s.id === selectedServiceId);

  const calculatePrice = () => {
    if (!selectedCountry || !selectedService) return 0;
    return Math.max(selectedCountry.priceFrom, selectedService.priceFrom);
  };

  const generatePhoneNumber = (countryCode: string) => {
    const numbers = Math.random().toString().slice(2, 9);
    switch (countryCode) {
      case "RU":
        return `+7 916 ${numbers.slice(0, 3)}-${numbers.slice(3, 5)}-${numbers.slice(5, 7)}`;
      case "UA":
        return `+380 ${numbers.slice(0, 2)} ${numbers.slice(2, 5)}-${numbers.slice(5, 7)}-${numbers.slice(7, 9)}`;
      case "KZ":
        return `+7 ${numbers.slice(0, 3)} ${numbers.slice(3, 6)}-${numbers.slice(6, 8)}-${numbers.slice(8, 10)}`;
      case "US":
        return `+1 ${numbers.slice(0, 3)} ${numbers.slice(3, 6)}-${numbers.slice(6, 10)}`;
      default:
        return `+${numbers}`;
    }
  };

  const purchaseMutation = useMutation({
    mutationFn: async () => {
      if (!selectedCountryId || !selectedServiceId) {
        throw new Error("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –∏ —Å–µ—Ä–≤–∏—Å");
      }

      const phoneNumber = generatePhoneNumber(selectedCountry?.code || "");
      const price = calculatePrice();
      const expiresAt = new Date(Date.now() + 20 * 60 * 1000); // 20 minutes

      const response = await apiRequest("POST", "/api/orders", {
        telegramId: telegramUser?.id?.toString() || "sample_user",
        phoneNumber,
        countryId: selectedCountryId,
        serviceId: selectedServiceId,
        price,
        status: "active",
        expiresAt: expiresAt.toISOString(),
      });

      return response.json();
    },
    onSuccess: (order: Order) => {
      queryClient.invalidateQueries({ queryKey: ["/api/orders"] });
      queryClient.invalidateQueries({ queryKey: ["/api/users"] });
      
      toast({
        title: "–ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω!",
        description: `–ù–æ–º–µ—Ä ${order.phoneNumber} –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é`,
      });
      
      onOpenChange(false, true);
      setSelectedCountryId("");
      setSelectedServiceId("");
    },
    onError: (error: any) => {
      toast({
        title: "–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä",
        variant: "destructive",
      });
    },
  });

  const handlePurchase = () => {
    purchaseMutation.mutate();
  };

  const availableCountries = countries?.filter(c => c.available) || [];

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle data-testid="title-purchase-modal">–ü–æ–∫—É–ø–∫–∞ –Ω–æ–º–µ—Ä–∞</DialogTitle>
        </DialogHeader>
        
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium mb-2">–°—Ç—Ä–∞–Ω–∞</label>
            <Select value={selectedCountryId} onValueChange={setSelectedCountryId}>
              <SelectTrigger data-testid="select-country">
                <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É" />
              </SelectTrigger>
              <SelectContent>
                {availableCountries.map((country) => (
                  <SelectItem key={country.id} value={country.id}>
                    {country.flag} {country.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
          
          <div>
            <label className="block text-sm font-medium mb-2">–°–µ—Ä–≤–∏—Å</label>
            <Select value={selectedServiceId} onValueChange={setSelectedServiceId}>
              <SelectTrigger data-testid="select-service">
                <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å" />
              </SelectTrigger>
              <SelectContent>
                {services?.map((service) => (
                  <SelectItem key={service.id} value={service.id}>
                    {service.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
          
          <Card className="bg-primary/5 border border-primary/20">
            <CardContent className="p-4">
              <div className="flex items-center justify-between">
                <span className="font-medium">–°—Ç–æ–∏–º–æ—Å—Ç—å:</span>
                <span className="text-xl font-bold text-primary" data-testid="text-price">
                  ‚ÇΩ{calculatePrice()}
                </span>
              </div>
            </CardContent>
          </Card>
          
          <Button
            onClick={handlePurchase}
            disabled={!selectedCountryId || !selectedServiceId || purchaseMutation.isPending}
            className="w-full bg-primary hover:bg-primary/90 shadow-cyber"
            data-testid="button-purchase"
          >
            {purchaseMutation.isPending ? "–ü–æ–∫—É–ø–∫–∞..." : "–ö—É–ø–∏—Ç—å –Ω–æ–º–µ—Ä"}
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  );
}


================================================================================
FILE: frontend/src/components/orders-tab.tsx
================================================================================

import { useQuery } from "@tanstack/react-query";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Copy } from "lucide-react";
import { useCopyToClipboard } from "@/lib/copy-utils";
import { useToast } from "@/hooks/use-toast";
import type { Order, Country, Service } from "@shared/schema";

interface OrderWithDetails extends Order {
  country?: Country;
  service?: Service;
}

export function OrdersTab() {
  const { copyToClipboard } = useCopyToClipboard();
  const { toast } = useToast();

  const { data: orders, isLoading } = useQuery<Order[]>({
    queryKey: ["/api/orders"],
  });

  const { data: countries } = useQuery<Country[]>({
    queryKey: ["/api/countries"],
  });

  const { data: services } = useQuery<Service[]>({
    queryKey: ["/api/services"],
  });

  const ordersWithDetails: OrderWithDetails[] = orders?.map(order => ({
    ...order,
    country: countries?.find(c => c.id === order.countryId),
    service: services?.find(s => s.id === order.serviceId),
  })) || [];

  const handleCopyNumber = async (phoneNumber: string) => {
    const success = await copyToClipboard(phoneNumber);
    if (success) {
      toast({
        title: "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!",
        description: "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞",
      });
    } else {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä",
        variant: "destructive",
      });
    }
  };

  const getStatusBadge = (status: string) => {
    switch (status) {
      case "active":
        return (
          <Badge variant="secondary" className="bg-green-100 dark:bg-green-900/20 text-green-700 dark:text-green-300">
            –ê–∫—Ç–∏–≤–µ–Ω
          </Badge>
        );
      case "completed":
        return (
          <Badge variant="secondary" className="bg-blue-100 dark:bg-blue-900/20 text-blue-700 dark:text-blue-300">
            –ó–∞–≤–µ—Ä—à–µ–Ω
          </Badge>
        );
      case "expired":
        return (
          <Badge variant="secondary" className="bg-red-100 dark:bg-red-900/20 text-red-700 dark:text-red-300">
            –ò—Å—Ç–µ–∫
          </Badge>
        );
      default:
        return null;
    }
  };

  const getTimeRemaining = (expiresAt: string) => {
    const now = new Date();
    const expiry = new Date(expiresAt);
    const diff = expiry.getTime() - now.getTime();
    
    if (diff <= 0) return "–ò—Å—Ç–µ–∫";
    
    const minutes = Math.floor(diff / (1000 * 60));
    const hours = Math.floor(minutes / 60);
    
    if (hours > 0) {
      return `–ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ ${hours}—á ${minutes % 60}–º`;
    }
    return `–ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ ${minutes} –º–∏–Ω`;
  };

  if (isLoading) {
    return (
      <div className="p-4 space-y-3">
        {[...Array(2)].map((_, i) => (
          <Card key={i} className="animate-pulse">
            <CardContent className="p-4 space-y-3">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-16" />
                  <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-12" />
                </div>
                <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-8" />
              </div>
              <div className="flex items-center justify-between">
                <div className="h-6 bg-gray-200 dark:bg-gray-700 rounded w-32" />
                <div className="w-8 h-8 bg-gray-200 dark:bg-gray-700 rounded-lg" />
              </div>
              <div className="flex items-center justify-between">
                <div className="h-3 bg-gray-200 dark:bg-gray-700 rounded w-24" />
                <div className="h-3 bg-gray-200 dark:bg-gray-700 rounded w-20" />
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    );
  }

  return (
    <div className="p-4 space-y-3">
      {ordersWithDetails.map((order) => (
        <Card key={order.id} data-testid={`card-order-${order.id}`}>
          <CardContent className="p-4 space-y-3">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                {getStatusBadge(order.status)}
                <span className="text-sm text-gray-500 dark:text-gray-400">
                  #{order.id.slice(-5)}
                </span>
              </div>
              <span className="text-sm font-medium">‚ÇΩ{order.price}</span>
            </div>
            
            <div className="flex items-center justify-between">
              <span 
                className="font-mono text-lg font-medium" 
                data-testid={`text-phone-${order.id}`}
              >
                {order.phoneNumber}
              </span>
              <Button
                variant="ghost"
                size="icon"
                onClick={() => handleCopyNumber(order.phoneNumber)}
                className="bg-gray-100 dark:bg-background"
                data-testid={`button-copy-${order.id}`}
              >
                <Copy className="h-4 w-4" />
              </Button>
            </div>
            
            <div className="flex items-center justify-between text-sm text-gray-500 dark:text-gray-400">
              <span>
                {order.service?.name} ‚Ä¢ {order.country?.name}
              </span>
              <span>
                {order.status === "active" ? getTimeRemaining(order.expiresAt) : "–ü–æ–ª—É—á–µ–Ω –∫–æ–¥"}
              </span>
            </div>
          </CardContent>
        </Card>
      ))}
      
      {ordersWithDetails.length === 0 && (
        <div className="text-center py-8 text-gray-500 dark:text-gray-400">
          –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤
        </div>
      )}
    </div>
  );
}


================================================================================
FILE: frontend/src/components/header.tsx
================================================================================

import { Moon, Sun, Wallet } from "lucide-react";
import { Button } from "@/components/ui/button";
import { useTheme } from "./theme-provider";
import { useQuery } from "@tanstack/react-query";
import { useTelegram } from "@/lib/telegram";
import type { User } from "@shared/schema";

export function Header() {
  const { theme, setTheme } = useTheme();
  const { user: telegramUser } = useTelegram();

  const { data: user } = useQuery<User>({
    queryKey: ["/api/users", telegramUser?.id?.toString() || "sample_user"],
    enabled: !!telegramUser?.id || true,
  });

  const toggleTheme = () => {
    setTheme(theme === "light" ? "dark" : "light");
  };

  const formatBalance = (balance: number) => {
    return `‚ÇΩ${(balance / 100).toFixed(2)}`;
  };

  return (
    <header className="sticky top-0 z-50 gradient-cyber backdrop-blur-sm border-b border-cyber-border shadow-cyber animate-fade-in">
      <div className="flex items-center justify-between p-4">
        <h1 className="text-xl font-bold text-cyber-accent animate-scale-in" data-testid="app-title">OnlineSim</h1>
        <div className="flex items-center gap-4 animate-fade-in">
          <div className="flex items-center gap-2 bg-primary/10 border border-primary/20 px-3 py-1.5 rounded-lg hover-lift">
            <Wallet className="h-4 w-4 text-primary" />
            <span 
              className="font-medium text-primary" 
              data-testid="user-balance"
            >
              {user ? formatBalance(user.balance) : "‚ÇΩ0.00"}
            </span>
          </div>
          <Button
            variant="ghost"
            size="icon"
            onClick={toggleTheme}
            className="bg-secondary/50 hover:bg-secondary border border-cyber-border btn-cyber"
            data-testid="button-theme-toggle"
          >
            <Sun className="h-4 w-4 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
            <Moon className="absolute h-4 w-4 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
            <span className="sr-only">Toggle theme</span>
          </Button>
        </div>
      </div>
    </header>
  );
}


================================================================================
FILE: frontend/src/components/theme-provider.tsx
================================================================================

import { createContext, useContext, useEffect, useState } from "react";

type Theme = "dark" | "light" | "system";

type ThemeProviderProps = {
  children: React.ReactNode;
  defaultTheme?: Theme;
  storageKey?: string;
};

type ThemeProviderState = {
  theme: Theme;
  setTheme: (theme: Theme) => void;
};

const initialState: ThemeProviderState = {
  theme: "system",
  setTheme: () => null,
};

const ThemeProviderContext = createContext<ThemeProviderState>(initialState);

export function ThemeProvider({
  children,
  defaultTheme = "system",
  storageKey = "vite-ui-theme",
  ...props
}: ThemeProviderProps) {
  const [theme, setTheme] = useState<Theme>(
    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme
  );

  useEffect(() => {
    const root = window.document.documentElement;

    root.classList.remove("light", "dark");

    if (theme === "system") {
      const systemTheme = window.matchMedia("(prefers-color-scheme: dark)")
        .matches
        ? "dark"
        : "light";

      root.classList.add(systemTheme);
      return;
    }

    root.classList.add(theme);
  }, [theme]);

  const value = {
    theme,
    setTheme: (theme: Theme) => {
      localStorage.setItem(storageKey, theme);
      setTheme(theme);
    },
  };

  return (
    <ThemeProviderContext.Provider {...props} value={value}>
      {children}
    </ThemeProviderContext.Provider>
  );
}

export const useTheme = () => {
  const context = useContext(ThemeProviderContext);

  if (context === undefined)
    throw new Error("useTheme must be used within a ThemeProvider");

  return context;
};


================================================================================
FILE: frontend/src/components/services-tab.tsx
================================================================================

import { useQuery } from "@tanstack/react-query";
import { Card, CardContent } from "@/components/ui/card";
import { ChevronRight } from "lucide-react";
import type { Service } from "@shared/schema";

interface ServicesTabProps {
  searchQuery: string;
  onServiceSelect: (service: Service) => void;
}

export function ServicesTab({ searchQuery, onServiceSelect }: ServicesTabProps) {
  const { data: services, isLoading } = useQuery<Service[]>({
    queryKey: ["/api/services"],
  });

  const filteredServices = services?.filter(service =>
    service.name.toLowerCase().includes(searchQuery.toLowerCase())
  ) || [];

  const getServiceIcon = (iconClass: string) => {
    const iconMap: Record<string, string> = {
      "fab fa-telegram": "üí¨",
      "fab fa-whatsapp": "üì±",
      "fab fa-discord": "üéÆ",
    };
    return iconMap[iconClass] || "üì±";
  };

  const getServiceColor = (name: string) => {
    switch (name.toLowerCase()) {
      case "telegram":
        return "bg-blue-100 dark:bg-blue-900/20";
      case "whatsapp":
        return "bg-green-100 dark:bg-green-900/20";
      case "discord":
        return "bg-purple-100 dark:bg-purple-900/20";
      default:
        return "bg-gray-100 dark:bg-gray-900/20";
    }
  };

  if (isLoading) {
    return (
      <div className="p-4 space-y-3">
        {[...Array(3)].map((_, i) => (
          <Card key={i} className="skeleton animate-pulse">
            <CardContent className="p-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 bg-muted rounded-xl" />
                  <div className="space-y-2">
                    <div className="h-4 bg-muted rounded w-20" />
                    <div className="h-3 bg-muted rounded w-16" />
                  </div>
                </div>
                <div className="w-4 h-4 bg-muted rounded" />
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    );
  }

  return (
    <div className="p-4 space-y-3">
      {filteredServices.map((service) => (
        <Card
          key={service.id}
          className="card-hover cursor-pointer animate-fade-in-up"
          onClick={() => onServiceSelect(service)}
          data-testid={`card-service-${service.id}`}
        >
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className={`w-10 h-10 rounded-xl ${getServiceColor(service.name)} flex items-center justify-center text-lg`}>
                  {getServiceIcon(service.icon)}
                </div>
                <div>
                  <h3 className="font-medium" data-testid={`text-service-name-${service.id}`}>
                    {service.name}
                  </h3>
                  <p className="text-sm text-gray-500 dark:text-gray-400">
                    ‚ÇΩ{service.priceFrom} - ‚ÇΩ{service.priceTo}
                  </p>
                </div>
              </div>
              <ChevronRight className="h-4 w-4 text-gray-400" />
            </div>
          </CardContent>
        </Card>
      ))}
      {filteredServices.length === 0 && (
        <div className="text-center py-8 text-gray-500 dark:text-gray-400">
          –°–µ—Ä–≤–∏—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        </div>
      )}
    </div>
  );
}


================================================================================
FILE: frontend/src/components/ui/toaster.tsx
================================================================================

import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}


================================================================================
FILE: frontend/src/components/ui/checkbox.tsx
================================================================================

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }


================================================================================
FILE: frontend/src/components/ui/alert.tsx
================================================================================

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }


================================================================================
FILE: frontend/src/components/ui/alert-dialog.tsx
================================================================================

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}


================================================================================
FILE: frontend/src/components/ui/tabs.tsx
================================================================================

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }


================================================================================
FILE: frontend/src/components/ui/breadcrumb.tsx
================================================================================

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:w-3.5 [&>svg]:h-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}


================================================================================
FILE: frontend/src/components/ui/navigation-menu.tsx
================================================================================

import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}


================================================================================
FILE: frontend/src/components/ui/card.tsx
================================================================================

import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }


================================================================================
FILE: frontend/src/components/ui/progress.tsx
================================================================================

"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }


================================================================================
FILE: frontend/src/components/ui/command.tsx
================================================================================

import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

const CommandDialog = ({ children, ...props }: DialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}


================================================================================
FILE: frontend/src/components/ui/sidebar.tsx
================================================================================

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
} from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar_state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContextProps = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContextProps | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContextProps>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <SheetHeader className="sr-only">
              <SheetTitle>Sidebar</SheetTitle>
              <SheetDescription>Displays the mobile sidebar.</SheetDescription>
            </SheetHeader>
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden text-sidebar-foreground md:block"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex w-full flex-1 flex-col bg-background",
        "md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("flex h-8 items-center gap-2 rounded-md px-2", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 max-w-[--skeleton-width] flex-1"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}


================================================================================
FILE: frontend/src/components/ui/toast.tsx
================================================================================

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}


================================================================================
FILE: frontend/src/components/ui/dropdown-menu.tsx
================================================================================

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}


================================================================================
FILE: frontend/src/components/ui/chart.tsx
================================================================================

"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item?.dataKey || item?.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}


================================================================================
FILE: frontend/src/components/ui/tooltip.tsx
================================================================================

"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }


================================================================================
FILE: frontend/src/components/ui/slider.tsx
================================================================================

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }


================================================================================
FILE: frontend/src/components/ui/collapsible.tsx
================================================================================

"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }


================================================================================
FILE: frontend/src/components/ui/popover.tsx
================================================================================

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }


================================================================================
FILE: frontend/src/components/ui/toggle.tsx
================================================================================

import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3 min-w-10",
        sm: "h-9 px-2.5 min-w-9",
        lg: "h-11 px-5 min-w-11",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }


================================================================================
FILE: frontend/src/components/ui/resizable.tsx
================================================================================

"use client"

import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }


================================================================================
FILE: frontend/src/components/ui/avatar.tsx
================================================================================

"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }


================================================================================
FILE: frontend/src/components/ui/menubar.tsx
================================================================================

"use client"

import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

function MenubarMenu({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {
  return <MenubarPrimitive.Menu {...props} />
}

function MenubarGroup({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Group>) {
  return <MenubarPrimitive.Group {...props} />
}

function MenubarPortal({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {
  return <MenubarPrimitive.Portal {...props} />
}

function MenubarRadioGroup({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {
  return <MenubarPrimitive.RadioGroup {...props} />
}

function MenubarSub({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {
  return <MenubarPrimitive.Sub data-slot="menubar-sub" {...props} />
}

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}


================================================================================
FILE: frontend/src/components/ui/pagination.tsx
================================================================================

import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}


================================================================================
FILE: frontend/src/components/ui/textarea.tsx
================================================================================

import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.ComponentProps<"textarea">
>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = "Textarea"

export { Textarea }


================================================================================
FILE: frontend/src/components/ui/separator.tsx
================================================================================

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }


================================================================================
FILE: frontend/src/components/ui/context-menu.tsx
================================================================================

import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}


================================================================================
FILE: frontend/src/components/ui/form.tsx
================================================================================

"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  FormProvider,
  useFormContext,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message ?? "") : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}


================================================================================
FILE: frontend/src/components/ui/badge.tsx
================================================================================

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }


================================================================================
FILE: frontend/src/components/ui/select.tsx
================================================================================

"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}


================================================================================
FILE: frontend/src/components/ui/accordion.tsx
================================================================================

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }


================================================================================
FILE: frontend/src/components/ui/input.tsx
================================================================================

import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }


================================================================================
FILE: frontend/src/components/ui/scroll-area.tsx
================================================================================

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }


================================================================================
FILE: frontend/src/components/ui/dialog.tsx
================================================================================

"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}


================================================================================
FILE: frontend/src/components/ui/switch.tsx
================================================================================

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }


================================================================================
FILE: frontend/src/components/ui/skeleton.tsx
================================================================================

import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }


================================================================================
FILE: frontend/src/components/ui/button.tsx
================================================================================

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }


================================================================================
FILE: frontend/src/components/ui/aspect-ratio.tsx
================================================================================

import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }


================================================================================
FILE: frontend/src/components/ui/drawer.tsx
================================================================================

"use client"

import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}


================================================================================
FILE: frontend/src/components/ui/calendar.tsx
================================================================================

import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ className, ...props }) => (
          <ChevronLeft className={cn("h-4 w-4", className)} {...props} />
        ),
        IconRight: ({ className, ...props }) => (
          <ChevronRight className={cn("h-4 w-4", className)} {...props} />
        ),
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }


================================================================================
FILE: frontend/src/components/ui/input-otp.tsx
================================================================================

import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }


================================================================================
FILE: frontend/src/components/ui/table.tsx
================================================================================

import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}


================================================================================
FILE: frontend/src/components/ui/toggle-group.tsx
================================================================================

"use client"

import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }


================================================================================
FILE: frontend/src/components/ui/carousel.tsx
================================================================================

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}


================================================================================
FILE: frontend/src/components/ui/sheet.tsx
================================================================================

"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}


================================================================================
FILE: frontend/src/components/ui/radio-group.tsx
================================================================================

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }


================================================================================
FILE: frontend/src/components/ui/label.tsx
================================================================================

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }


================================================================================
FILE: frontend/src/components/ui/hover-card.tsx
================================================================================

"use client"

import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }


================================================================================
FILE: frontend/src/lib/sse.ts
================================================================================

// Server-Sent Events integration
export class SSEClient {
  private eventSource: EventSource | null = null;
  private listeners: Map<string, Function[]> = new Map();

  connect(userId: string) {
    const url = `${import.meta.env.VITE_SSE_URL || '/api/events'}?user_id=${userId}`;
    this.eventSource = new EventSource(url);
    
    this.eventSource.onmessage = (event) => {
      try {
        const data = JSON.parse(event.data);
        this.emit(event.type || 'message', data);
      } catch (e) {
        console.error('SSE parse error:', e);
      }
    };

    this.eventSource.onerror = (error) => {
      console.error('SSE error:', error);
    };
  }

  on(eventType: string, callback: Function) {
    if (!this.listeners.has(eventType)) {
      this.listeners.set(eventType, []);
    }
    this.listeners.get(eventType)!.push(callback);
  }

  emit(eventType: string, data: any) {
    const callbacks = this.listeners.get(eventType) || [];
    callbacks.forEach(callback => callback(data));
  }

  disconnect() {
    if (this.eventSource) {
      this.eventSource.close();
      this.eventSource = null;
    }
  }
}

export const sseClient = new SSEClient();


================================================================================
FILE: frontend/src/lib/utils.ts
================================================================================

import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


================================================================================
FILE: frontend/src/lib/queryClient.ts
================================================================================

import { QueryClient, QueryFunction } from "@tanstack/react-query";

async function throwIfResNotOk(res: Response) {
  if (!res.ok) {
    const text = (await res.text()) || res.statusText;
    throw new Error(`${res.status}: ${text}`);
  }
}

export async function apiRequest(
  method: string,
  url: string,
  data?: unknown | undefined,
): Promise<Response> {
  const res = await fetch(url, {
    method,
    headers: data ? { "Content-Type": "application/json" } : {},
    body: data ? JSON.stringify(data) : undefined,
    credentials: "include",
  });

  await throwIfResNotOk(res);
  return res;
}

type UnauthorizedBehavior = "returnNull" | "throw";
export const getQueryFn: <T>(options: {
  on401: UnauthorizedBehavior;
}) => QueryFunction<T> =
  ({ on401: unauthorizedBehavior }) =>
  async ({ queryKey }) => {
    const res = await fetch(queryKey.join("/") as string, {
      credentials: "include",
    });

    if (unauthorizedBehavior === "returnNull" && res.status === 401) {
      return null;
    }

    await throwIfResNotOk(res);
    return await res.json();
  };

export const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      queryFn: getQueryFn({ on401: "throw" }),
      refetchInterval: false,
      refetchOnWindowFocus: false,
      staleTime: Infinity,
      retry: false,
    },
    mutations: {
      retry: false,
    },
  },
});


================================================================================
FILE: frontend/src/lib/copy-utils.ts
================================================================================

import { useTelegram } from './telegram';

export const useCopyToClipboard = () => {
  const { hapticFeedback } = useTelegram();

  const copyToClipboard = async (text: string): Promise<boolean> => {
    try {
      if (navigator.clipboard && window.isSecureContext) {
        await navigator.clipboard.writeText(text);
      } else {
        // Fallback for older browsers or non-secure contexts
        const textArea = document.createElement('textarea');
        textArea.value = text;
        textArea.style.position = 'fixed';
        textArea.style.left = '-999999px';
        textArea.style.top = '-999999px';
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        document.execCommand('copy');
        textArea.remove();
      }
      
      hapticFeedback('success');
      return true;
    } catch (error) {
      console.error('Failed to copy text: ', error);
      hapticFeedback('error');
      return false;
    }
  };

  const extractCode = (text: string): string | null => {
    const codeMatch = text.match(/\b\d{4,6}\b/);
    return codeMatch ? codeMatch[0] : null;
  };

  return { copyToClipboard, extractCode };
};


================================================================================
FILE: frontend/src/lib/telegram.ts
================================================================================

interface TelegramWebApp {
  initData: string;
  initDataUnsafe: {
    user?: {
      id: number;
      first_name: string;
      last_name?: string;
      username?: string;
      language_code?: string;
    };
  };
  version: string;
  platform: string;
  colorScheme: 'light' | 'dark';
  themeParams: {
    bg_color?: string;
    text_color?: string;
    hint_color?: string;
    link_color?: string;
    button_color?: string;
    button_text_color?: string;
  };
  isExpanded: boolean;
  viewportHeight: number;
  viewportStableHeight: number;
  headerColor: string;
  backgroundColor: string;
  BackButton: {
    isVisible: boolean;
    onClick(callback: () => void): void;
    offClick(callback: () => void): void;
    show(): void;
    hide(): void;
  };
  MainButton: {
    text: string;
    color: string;
    textColor: string;
    isVisible: boolean;
    isProgressVisible: boolean;
    isActive: boolean;
    setText(text: string): void;
    onClick(callback: () => void): void;
    offClick(callback: () => void): void;
    show(): void;
    hide(): void;
    enable(): void;
    disable(): void;
    showProgress(leaveActive?: boolean): void;
    hideProgress(): void;
    setParams(params: {
      text?: string;
      color?: string;
      text_color?: string;
      is_active?: boolean;
      is_visible?: boolean;
    }): void;
  };
  HapticFeedback: {
    impactOccurred(style: 'light' | 'medium' | 'heavy' | 'rigid' | 'soft'): void;
    notificationOccurred(type: 'error' | 'success' | 'warning'): void;
    selectionChanged(): void;
  };
  expand(): void;
  close(): void;
  ready(): void;
}

declare global {
  interface Window {
    Telegram?: {
      WebApp: TelegramWebApp;
    };
  }
}

export const useTelegram = () => {
  const tg = window.Telegram?.WebApp;

  const onClose = () => {
    tg?.close();
  };

  const onToggleButton = () => {
    if (tg?.MainButton.isVisible) {
      tg.MainButton.hide();
    } else {
      tg?.MainButton.show();
    }
  };

  const hapticFeedback = (type: 'light' | 'medium' | 'heavy' | 'success' | 'error' | 'warning' | 'selection') => {
    if (!tg?.HapticFeedback) return;
    
    if (type === 'success' || type === 'error' || type === 'warning') {
      tg.HapticFeedback.notificationOccurred(type);
    } else if (type === 'selection') {
      tg.HapticFeedback.selectionChanged();
    } else {
      tg.HapticFeedback.impactOccurred(type);
    }
  };

  return {
    tg,
    user: tg?.initDataUnsafe?.user,
    queryId: tg?.initDataUnsafe,
    onClose,
    onToggleButton,
    hapticFeedback,
    isReady: !!tg,
    colorScheme: tg?.colorScheme || 'light',
  };
};

export const initTelegramApp = () => {
  const tg = window.Telegram?.WebApp;
  if (tg) {
    tg.ready();
    tg.expand();
  }
};


================================================================================
FILE: frontend/src/hooks/use-mobile.tsx
================================================================================

import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}


================================================================================
FILE: frontend/src/hooks/use-toast.ts
================================================================================

import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }


================================================================================
FILE: frontend/src/pages/home.tsx
================================================================================

import { useState, useEffect } from "react";
import { useQuery } from "@tanstack/react-query";
import { Header } from "@/components/header";
import { SelectTab } from "@/components/select-tab";
import { OrdersTab } from "@/components/orders-tab";
import { MessagesTab } from "@/components/messages-tab";
import { ProfileTab } from "@/components/profile-tab";
import { FAQTab } from "@/components/faq-tab";
import { AdminTab } from "@/components/admin-tab";
import { BottomNavigation } from "@/components/bottom-navigation";
import { initTelegramApp } from "@/lib/telegram";
import { useTelegram } from "@/lib/telegram";
import type { User } from "@shared/schema";

export default function Home() {
  const [bottomNavTab, setBottomNavTab] = useState("home");
  const { user: telegramUser } = useTelegram();

  const { data: user } = useQuery<User>({
    queryKey: ["/api/users", telegramUser?.id?.toString() || "sample_user"],
    enabled: !!telegramUser?.id || true,
  });

  useEffect(() => {
    initTelegramApp();
  }, []);

  const handlePurchaseSuccess = () => {
    // Switch to orders tab after successful purchase
    setBottomNavTab("numbers");
  };

  const renderContent = () => {
    switch (bottomNavTab) {
      case "home":
        return (
          <SelectTab 
            onPurchaseSuccess={handlePurchaseSuccess} 
            onOpenFAQ={() => setBottomNavTab("faq")}
          />
        );
      case "numbers":
        return <OrdersTab />;
      case "history":
        return <MessagesTab />;
      case "profile":
        return <ProfileTab onOpenAdmin={() => setBottomNavTab("admin")} />;
      case "faq":
        return <FAQTab />;
      case "admin":
        return <AdminTab />;
      default:
        return (
          <SelectTab 
            onPurchaseSuccess={handlePurchaseSuccess} 
            onOpenFAQ={() => setBottomNavTab("faq")}
          />
        );
    }
  };

  return (
    <div className="min-h-screen bg-background flex flex-col">
      <Header />
      
      <main className="flex-1 pb-16 animate-fade-in">
        <div className="animate-fade-in-up">
          {renderContent()}
        </div>
      </main>
      
      <BottomNavigation 
        activeTab={bottomNavTab}
        onTabChange={setBottomNavTab}
      />
    </div>
  );
}


================================================================================
FILE: frontend/src/pages/not-found.tsx
================================================================================

import { Card, CardContent } from "@/components/ui/card";
import { AlertCircle } from "lucide-react";

export default function NotFound() {
  return (
    <div className="min-h-screen w-full flex items-center justify-center bg-gray-50">
      <Card className="w-full max-w-md mx-4">
        <CardContent className="pt-6">
          <div className="flex mb-4 gap-2">
            <AlertCircle className="h-8 w-8 text-red-500" />
            <h1 className="text-2xl font-bold text-gray-900">404 Page Not Found</h1>
          </div>

          <p className="mt-4 text-sm text-gray-600">
            Did you forget to add the page to the router?
          </p>
        </CardContent>
      </Card>
    </div>
  );
}
